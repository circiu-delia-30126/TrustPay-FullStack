{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrada\\\\Documents\\\\semestru 2\\\\proiect frontend\\\\TrustPay-front_end\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport LoginForm from './LoginForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Starea de logare\n  const [currentTab, setCurrentTab] = useState('current'); // Tab-ul selectat\n  const [balance, setBalance] = useState(0); // Balanța de pe contul curent\n  const [transactions, setTransactions] = useState([]); // Istoricul tranzacțiilor\n\n  const handleLogin = () => {\n    setIsLoggedIn(true);\n  };\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n  };\n  const addFunds = () => {\n    const amount = parseFloat(prompt(\"Introduceți suma de adăugat:\"));\n    if (amount && amount > 0) {\n      setBalance(balance + amount);\n      setTransactions([...transactions, {\n        type: 'Depunere',\n        amount\n      }]);\n    }\n  };\n  const viewTransactions = () => {\n    alert(\"Istoricul tranzacțiilor: \" + transactions.map(t => `${t.type} - ${t.amount} RON`).join(', '));\n  };\n\n  // Pagina de login\n  // if (!isLoggedIn) {\n  //   return (\n  //     <div className=\"login-container\">\n  //       <h1>TrustPay</h1>\n  //       <h2>Enter your account</h2>\n  //       <input type=\"text\" placeholder=\"Username\" />\n  //       <input type=\"password\" placeholder=\"Password\" />\n  //       <button onClick={handleLogin}>Login</button>\n  //     </div>\n  //   );\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(LoginForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"noTxio+nahjuUjBINov6dbqyico=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","LoginForm","jsxDEV","_jsxDEV","App","_s","isLoggedIn","setIsLoggedIn","currentTab","setCurrentTab","balance","setBalance","transactions","setTransactions","handleLogin","handleLogout","addFunds","amount","parseFloat","prompt","type","viewTransactions","alert","map","t","join","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Andrada/Documents/semestru 2/proiect frontend/TrustPay-front_end/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport LoginForm from './LoginForm';\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Starea de logare\n  const [currentTab, setCurrentTab] = useState('current'); // Tab-ul selectat\n  const [balance, setBalance] = useState(0); // Balanța de pe contul curent\n  const [transactions, setTransactions] = useState([]); // Istoricul tranzacțiilor\n\n  const handleLogin = () => {\n    setIsLoggedIn(true);\n  };\n\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n  };\n\n  const addFunds = () => {\n    const amount = parseFloat(prompt(\"Introduceți suma de adăugat:\"));\n    if (amount && amount > 0) {\n      setBalance(balance + amount);\n      setTransactions([...transactions, { type: 'Depunere', amount }]);\n    }\n  };\n\n  const viewTransactions = () => {\n    alert(\"Istoricul tranzacțiilor: \" + transactions.map(t => `${t.type} - ${t.amount} RON`).join(', '));\n  };\n\n  // Pagina de login\n  // if (!isLoggedIn) {\n  //   return (\n  //     <div className=\"login-container\">\n  //       <h1>TrustPay</h1>\n  //       <h2>Enter your account</h2>\n  //       <input type=\"text\" placeholder=\"Username\" />\n  //       <input type=\"password\" placeholder=\"Password\" />\n  //       <button onClick={handleLogin}>Login</button>\n  //     </div>\n  //   );\n  // }\n \n  \n  return (\n    <div>\n      <LoginForm />\n    </div>\n  );\n}\n\n    \n\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAClB,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACrD,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;EACzD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEtD,MAAMc,WAAW,GAAGA,CAAA,KAAM;IACxBP,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMQ,YAAY,GAAGA,CAAA,KAAM;IACzBR,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EAED,MAAMS,QAAQ,GAAGA,CAAA,KAAM;IACrB,MAAMC,MAAM,GAAGC,UAAU,CAACC,MAAM,CAAC,8BAA8B,CAAC,CAAC;IACjE,IAAIF,MAAM,IAAIA,MAAM,GAAG,CAAC,EAAE;MACxBN,UAAU,CAACD,OAAO,GAAGO,MAAM,CAAC;MAC5BJ,eAAe,CAAC,CAAC,GAAGD,YAAY,EAAE;QAAEQ,IAAI,EAAE,UAAU;QAAEH;MAAO,CAAC,CAAC,CAAC;IAClE;EACF,CAAC;EAED,MAAMI,gBAAgB,GAAGA,CAAA,KAAM;IAC7BC,KAAK,CAAC,2BAA2B,GAAGV,YAAY,CAACW,GAAG,CAACC,CAAC,IAAI,GAAGA,CAAC,CAACJ,IAAI,MAAMI,CAAC,CAACP,MAAM,MAAM,CAAC,CAACQ,IAAI,CAAC,IAAI,CAAC,CAAC;EACtG,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA,oBACEtB,OAAA;IAAAuB,QAAA,eACEvB,OAAA,CAACF,SAAS;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEV;AAACzB,EAAA,CA7CQD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AAkDZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}