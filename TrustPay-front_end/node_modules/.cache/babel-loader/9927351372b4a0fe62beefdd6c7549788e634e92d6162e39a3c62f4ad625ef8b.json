{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrada\\\\Documents\\\\semestru 2\\\\proiect frontend\\\\TrustPay-front_end\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard({\n  userId,\n  userName\n}) {\n  _s();\n  const [accounts, setAccounts] = useState([]);\n  const [selectedTab, setSelectedTab] = useState('');\n\n  // Fetch accounts for the user when the component loads\n  useEffect(() => {\n    const fetchAccounts = async () => {\n      const response = await fetch(`/api/accounts/user/${userId}`);\n      const data = await response.json();\n      setAccounts(data);\n      if (data.length > 0) {\n        setSelectedTab(data[0].accountType);\n      }\n    };\n    fetchAccounts();\n  }, [userId]);\n  const addBankAccount = async () => {\n    const accountType = prompt('Introduceți tipul noului cont bancar (ex: Economii, Investiții):');\n    if (!accountType) return;\n    const newAccount = {\n      userId: userId,\n      accountType: accountType,\n      balance: 0,\n      currency: 'RON',\n      createdAt: new Date()\n    };\n    const response = await fetch('/api/accounts', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newAccount)\n    });\n    if (response.ok) {\n      const addedAccount = await response.json();\n      setAccounts([...accounts, addedAccount]);\n      setSelectedTab(addedAccount.accountType); // Automatically select the new account\n    } else {\n      alert('Eroare la adăugarea contului!');\n    }\n  };\n  const addFunds = async () => {\n    const amount = parseFloat(prompt('Introduceți suma de adăugat:'));\n    if (isNaN(amount) || amount <= 0) return;\n    const updatedAccounts = accounts.map(acc => acc.accountType === selectedTab ? {\n      ...acc,\n      balance: acc.balance + amount\n    } : acc);\n    setAccounts(updatedAccounts);\n  };\n  const viewTransactions = async () => {\n    const account = accounts.find(acc => acc.accountType === selectedTab);\n    if (!account) return;\n    alert(`Tranzacții pentru contul ${account.accountType}: ` + (account.transactions.length ? account.transactions.map(t => `${t.transactionType} - ${t.amount} RON`).join(', ') : 'Nu există tranzacții.'));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"TrustPay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-right\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"username\",\n          children: [\"Conectat ca: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: userName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 51\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addBankAccount,\n          children: \"Creare cont bancar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => alert('Logout action'),\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabs\",\n      children: accounts.map((acc, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedTab(acc.accountType),\n        className: selectedTab === acc.accountType ? 'active' : '',\n        children: acc.accountType\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: accounts.filter(acc => acc.accountType === selectedTab).map((acc, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: acc.accountType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Balanta: \", acc.balance, \" RON\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addFunds,\n          children: \"Adaug\\u0103 Bani\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: viewTransactions,\n          children: \"Istoric Tranzac\\u021Bii\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"l4QhZ1RgO2VBqD/X8WTW3tlavUM=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Dashboard","userId","userName","_s","accounts","setAccounts","selectedTab","setSelectedTab","fetchAccounts","response","fetch","data","json","length","accountType","addBankAccount","prompt","newAccount","balance","currency","createdAt","Date","method","headers","body","JSON","stringify","ok","addedAccount","alert","addFunds","amount","parseFloat","isNaN","updatedAccounts","map","acc","viewTransactions","account","find","transactions","t","transactionType","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","index","filter","_c","$RefreshReg$"],"sources":["C:/Users/Andrada/Documents/semestru 2/proiect frontend/TrustPay-front_end/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\nfunction Dashboard({ userId, userName }) {\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [selectedTab, setSelectedTab] = useState('');\r\n\r\n  // Fetch accounts for the user when the component loads\r\n  useEffect(() => {\r\n    const fetchAccounts = async () => {\r\n      const response = await fetch(`/api/accounts/user/${userId}`);\r\n      const data = await response.json();\r\n      setAccounts(data);\r\n      if (data.length > 0) {\r\n        setSelectedTab(data[0].accountType);\r\n      }\r\n    };\r\n\r\n    fetchAccounts();\r\n  }, [userId]);\r\n\r\n  const addBankAccount = async () => {\r\n    const accountType = prompt('Introduceți tipul noului cont bancar (ex: Economii, Investiții):');\r\n    if (!accountType) return;\r\n\r\n    const newAccount = {\r\n      userId: userId,\r\n      accountType: accountType,\r\n      balance: 0,\r\n      currency: 'RON',\r\n      createdAt: new Date(),\r\n    };\r\n\r\n    const response = await fetch('/api/accounts', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(newAccount),\r\n    });\r\n\r\n    if (response.ok) {\r\n      const addedAccount = await response.json();\r\n      setAccounts([...accounts, addedAccount]);\r\n      setSelectedTab(addedAccount.accountType); // Automatically select the new account\r\n    } else {\r\n      alert('Eroare la adăugarea contului!');\r\n    }\r\n  };\r\n\r\n  const addFunds = async () => {\r\n    const amount = parseFloat(prompt('Introduceți suma de adăugat:'));\r\n    if (isNaN(amount) || amount <= 0) return;\r\n\r\n    const updatedAccounts = accounts.map((acc) =>\r\n      acc.accountType === selectedTab\r\n        ? {\r\n            ...acc,\r\n            balance: acc.balance + amount,\r\n          }\r\n        : acc\r\n    );\r\n\r\n    setAccounts(updatedAccounts);\r\n  };\r\n\r\n  const viewTransactions = async () => {\r\n    const account = accounts.find(acc => acc.accountType === selectedTab);\r\n    if (!account) return;\r\n\r\n    alert(`Tranzacții pentru contul ${account.accountType}: ` +\r\n      (account.transactions.length ? account.transactions.map(t => `${t.transactionType} - ${t.amount} RON`).join(', ') : 'Nu există tranzacții.'));\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <header className=\"header\">\r\n        <h1>TrustPay</h1>\r\n        <div className=\"header-right\">\r\n          {/* Afișează corect numele utilizatorului */}\r\n          <span className=\"username\">Conectat ca: <strong>{userName}</strong></span>\r\n          <button onClick={addBankAccount}>Creare cont bancar</button>\r\n          <button onClick={() => alert('Logout action')}>Logout</button>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"tabs\">\r\n        {accounts.map((acc, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => setSelectedTab(acc.accountType)}\r\n            className={selectedTab === acc.accountType ? 'active' : ''}\r\n          >\r\n            {acc.accountType}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"tab-content\">\r\n        {accounts\r\n          .filter(acc => acc.accountType === selectedTab)\r\n          .map((acc, index) => (\r\n            <div key={index}>\r\n              <h3>{acc.accountType}</h3>\r\n              <p>Balanta: {acc.balance} RON</p>\r\n              <button onClick={addFunds}>Adaugă Bani</button>\r\n              <button onClick={viewTransactions}>Istoric Tranzacții</button>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}