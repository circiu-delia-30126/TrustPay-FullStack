{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrada\\\\Documents\\\\semestru 2\\\\proiect frontend\\\\TrustPay-front_end\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard({\n  userId,\n  userName,\n  initialAccounts\n}) {\n  _s();\n  // State pentru conturi și tranzacții\n  const [accounts, setAccounts] = useState(initialAccounts);\n  const [selectedTab, setSelectedTab] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Selectează contul implicit la început\n  useEffect(() => {\n    if (accounts.length > 0) {\n      setSelectedTab(accounts[0].accountType);\n    }\n  }, [accounts]);\n\n  // Adaugă un cont bancar\n  const addBankAccount = async () => {\n    const accountType = prompt('Introduceți tipul noului cont bancar (ex: Economii, Investiții):');\n    if (!accountType) return;\n    const newAccount = {\n      userId: userId,\n      accountType: accountType,\n      balance: 0,\n      currency: 'RON',\n      createdAt: new Date()\n    };\n    const response = await fetch('/api/accounts', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newAccount)\n    });\n    if (response.ok) {\n      const addedAccount = await response.json();\n      setAccounts([...accounts, addedAccount]); // Adăugăm noul cont\n      setSelectedTab(addedAccount.accountType); // Selectăm automat contul adăugat\n    } else {\n      alert('Eroare la adăugarea contului!');\n    }\n  };\n\n  // Adaugă fonduri în contul selectat\n  const addFunds = async () => {\n    const amount = parseFloat(prompt('Introduceți suma de adăugat:'));\n    if (isNaN(amount) || amount <= 0) return;\n    const updatedAccounts = accounts.map(acc => acc.accountType === selectedTab ? {\n      ...acc,\n      balance: acc.balance + amount\n    } : acc);\n\n    // Actualizăm starea pentru a reflecta noile fonduri\n    setAccounts(updatedAccounts);\n  };\n\n  // Vizualizează tranzacțiile contului selectat\n  const viewTransactions = async () => {\n    const account = accounts.find(acc => acc.accountType === selectedTab);\n    if (!account) return;\n\n    // Înlocuiește / adaugă logica de tranzacții în funcție de structura API-ului\n    alert(`Tranzacții pentru contul ${account.accountType}: ` + (account.transactions && account.transactions.length ? account.transactions.map(t => `${t.transactionType} - ${t.amount} RON`).join(', ') : 'Nu există tranzacții.'));\n  };\n\n  // Începe încărcarea tranzacțiilor de la server\n  useEffect(() => {\n    setLoading(true);\n    fetch('/api/transactions').then(response => response.json()).then(data => {\n      if (data && Array.isArray(data.transactions)) {\n        setAccounts(prevAccounts => prevAccounts.map(acc => acc.accountType === selectedTab ? {\n          ...acc,\n          transactions: data.transactions\n        } : acc));\n      } else {\n        setError('Datele primite nu sunt valide.');\n      }\n    }).catch(error => {\n      setError('A apărut o eroare la obținerea tranzacțiilor.');\n      console.error(error);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, [selectedTab]); // Aceasta se va executa atunci când tab-ul selectat se schimbă\n\n  // Dacă încă se încarcă datele\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\xCEnc\\u0103rc\\u0103m datele...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Dacă există o eroare la încărcare\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"TrustPay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-right\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"username\",\n          children: [\"Conectat ca: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: userName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 51\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addBankAccount,\n          children: \"Creare cont bancar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => alert('Logout action'),\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabs\",\n      children: accounts.map((acc, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedTab(acc.accountType),\n        className: selectedTab === acc.accountType ? 'active' : '',\n        children: acc.accountType\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: accounts.filter(acc => acc.accountType === selectedTab).map((acc, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: acc.accountType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Balanta: \", acc.balance, \" RON\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addFunds,\n          children: \"Adaug\\u0103 Bani\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: viewTransactions,\n          children: \"Istoric Tranzac\\u021Bii\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"I+mdOIrm80UoC+X4wMTuzKsVNMI=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Dashboard","userId","userName","initialAccounts","_s","accounts","setAccounts","selectedTab","setSelectedTab","loading","setLoading","error","setError","length","accountType","addBankAccount","prompt","newAccount","balance","currency","createdAt","Date","response","fetch","method","headers","body","JSON","stringify","ok","addedAccount","json","alert","addFunds","amount","parseFloat","isNaN","updatedAccounts","map","acc","viewTransactions","account","find","transactions","t","transactionType","join","then","data","Array","isArray","prevAccounts","catch","console","finally","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","index","filter","_c","$RefreshReg$"],"sources":["C:/Users/Andrada/Documents/semestru 2/proiect frontend/TrustPay-front_end/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\nfunction Dashboard({ userId, userName, initialAccounts }) {\r\n  // State pentru conturi și tranzacții\r\n  const [accounts, setAccounts] = useState(initialAccounts);\r\n  const [selectedTab, setSelectedTab] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Selectează contul implicit la început\r\n  useEffect(() => {\r\n    if (accounts.length > 0) {\r\n      setSelectedTab(accounts[0].accountType);\r\n    }\r\n  }, [accounts]);\r\n\r\n  // Adaugă un cont bancar\r\n  const addBankAccount = async () => {\r\n    const accountType = prompt('Introduceți tipul noului cont bancar (ex: Economii, Investiții):');\r\n    if (!accountType) return;\r\n\r\n    const newAccount = {\r\n      userId: userId,\r\n      accountType: accountType,\r\n      balance: 0,\r\n      currency: 'RON',\r\n      createdAt: new Date(),\r\n    };\r\n\r\n    const response = await fetch('/api/accounts', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(newAccount),\r\n    });\r\n\r\n    if (response.ok) {\r\n      const addedAccount = await response.json();\r\n      setAccounts([...accounts, addedAccount]); // Adăugăm noul cont\r\n      setSelectedTab(addedAccount.accountType); // Selectăm automat contul adăugat\r\n    } else {\r\n      alert('Eroare la adăugarea contului!');\r\n    }\r\n  };\r\n\r\n  // Adaugă fonduri în contul selectat\r\n  const addFunds = async () => {\r\n    const amount = parseFloat(prompt('Introduceți suma de adăugat:'));\r\n    if (isNaN(amount) || amount <= 0) return;\r\n\r\n    const updatedAccounts = accounts.map((acc) =>\r\n      acc.accountType === selectedTab\r\n        ? {\r\n            ...acc,\r\n            balance: acc.balance + amount,\r\n          }\r\n        : acc\r\n    );\r\n\r\n    // Actualizăm starea pentru a reflecta noile fonduri\r\n    setAccounts(updatedAccounts);\r\n  };\r\n\r\n  // Vizualizează tranzacțiile contului selectat\r\n  const viewTransactions = async () => {\r\n    const account = accounts.find((acc) => acc.accountType === selectedTab);\r\n    if (!account) return;\r\n\r\n    // Înlocuiește / adaugă logica de tranzacții în funcție de structura API-ului\r\n    alert(`Tranzacții pentru contul ${account.accountType}: ` +\r\n      (account.transactions && account.transactions.length\r\n        ? account.transactions.map(t => `${t.transactionType} - ${t.amount} RON`).join(', ')\r\n        : 'Nu există tranzacții.'));\r\n  };\r\n\r\n  // Începe încărcarea tranzacțiilor de la server\r\n  useEffect(() => {\r\n    setLoading(true);\r\n\r\n    fetch('/api/transactions')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data && Array.isArray(data.transactions)) {\r\n          setAccounts((prevAccounts) =>\r\n            prevAccounts.map((acc) =>\r\n              acc.accountType === selectedTab ? { ...acc, transactions: data.transactions } : acc\r\n            )\r\n          );\r\n        } else {\r\n          setError('Datele primite nu sunt valide.');\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setError('A apărut o eroare la obținerea tranzacțiilor.');\r\n        console.error(error);\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  }, [selectedTab]); // Aceasta se va executa atunci când tab-ul selectat se schimbă\r\n\r\n  // Dacă încă se încarcă datele\r\n  if (loading) {\r\n    return <div>Încărcăm datele...</div>;\r\n  }\r\n\r\n  // Dacă există o eroare la încărcare\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <header className=\"header\">\r\n        <h1>TrustPay</h1>\r\n        <div className=\"header-right\">\r\n          <span className=\"username\">Conectat ca: <strong>{userName}</strong></span>\r\n          <button onClick={addBankAccount}>Creare cont bancar</button>\r\n          <button onClick={() => alert('Logout action')}>Logout</button>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"tabs\">\r\n        {accounts.map((acc, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => setSelectedTab(acc.accountType)}\r\n            className={selectedTab === acc.accountType ? 'active' : ''}\r\n          >\r\n            {acc.accountType}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"tab-content\">\r\n        {accounts\r\n          .filter(acc => acc.accountType === selectedTab)\r\n          .map((acc, index) => (\r\n            <div key={index}>\r\n              <h3>{acc.accountType}</h3>\r\n              <p>Balanta: {acc.balance} RON</p>\r\n              <button onClick={addFunds}>Adaugă Bani</button>\r\n              <button onClick={viewTransactions}>Istoric Tranzacții</button>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}