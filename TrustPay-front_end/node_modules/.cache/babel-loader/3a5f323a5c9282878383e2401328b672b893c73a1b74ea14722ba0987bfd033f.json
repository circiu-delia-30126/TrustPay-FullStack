{"ast":null,"code":"var _jsxFileName = \"D:\\\\II\\\\Proiect\\\\proiect repository2\\\\TrustPay_Project\\\\TrustPay_corect\\\\TrustPay-front_end\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './Dashboard.css';\nimport logo from './logo1.png';\nimport { useNavigate } from 'react-router-dom';\nimport Profile from './Profile'; // Asigură-te că Profile este corect importat și utilizat dacă este cazul\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Dashboard({\n  user,\n  onLogout\n}) {\n  _s();\n  const [accounts, setAccounts] = useState([]);\n  const [currentTab, setCurrentTab] = useState(null);\n  const [showTransferForm, setShowTransferForm] = useState(false);\n  const [fromAccountId, setFromAccountId] = useState(null);\n  const [toAccountId, setToAccountId] = useState(\"\");\n  const [transferAmount, setTransferAmount] = useState(\"\");\n  const [transferCurrency, setTransferCurrency] = useState(\"RON\");\n  const [message, setMessage] = useState(\"\");\n  const [messageType, setMessageType] = useState(\"\");\n  const [transferType, setTransferType] = useState(null);\n  const [toUserName, setToUserName] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [currency, setCurrency] = useState(\"RON\");\n  const [fromUserName] = useState(user.userName);\n  const [showNotification, setShowNotification] = useState(false);\n  const [notificationMessage, setNotificationMessage] = useState(\"\");\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n  const [accountToDelete, setAccountToDelete] = useState(null);\n  const [deleteMessage, setDeleteMessage] = useState(\"\");\n  const [deleteMessageType, setDeleteMessageType] = useState(\"\");\n  const [showCreateAccountModal, setShowCreateAccountModal] = useState(false);\n  const [selectedAccountType, setSelectedAccountType] = useState(\"\");\n  const [createAccountMessage, setCreateAccountMessage] = useState(\"\");\n  const [createAccountMessageType, setCreateAccountMessageType] = useState(\"\");\n  const navigate = useNavigate();\n  const goToProfile = () => {\n    navigate('/profile');\n  };\n  const fetchAccounts = async () => {\n    try {\n      const response = await fetch(`https://localhost:7157/api/Accounts/user/${user.userId}`);\n      const data = await response.json();\n      if (Array.isArray(data) && data.length > 0) {\n        setAccounts(data);\n        // Set current tab to the first account's type if no tab is currently selected\n        if (currentTab === null) {\n          setCurrentTab(data[0].accountType);\n        } else {\n          // If the current tab (selectedAccountType after creation) is no longer valid,\n          // or if the account was deleted, switch to the first available account.\n          // This ensures a valid tab is always selected.\n          const currentTabExists = data.some(acc => acc.accountType === currentTab);\n          if (!currentTabExists && data.length > 0) {\n            setCurrentTab(data[0].accountType);\n          } else if (data.length === 0) {\n            setCurrentTab(null); // No accounts left\n          }\n        }\n      } else {\n        setAccounts([]);\n        setCurrentTab(null); // No accounts, no active tab\n      }\n    } catch (error) {\n      console.error(\"Error fetching accounts:\", error);\n      // Handle cases where user has no accounts (e.g., first login, or all deleted)\n      setAccounts([]);\n      setCurrentTab(null);\n    }\n  };\n\n  // Re-fetch accounts when user.userId changes\n  useEffect(() => {\n    if (user && user.userId) {\n      fetchAccounts();\n    }\n  }, [user.userId]);\n  const showConfirmationNotification = message => {\n    setNotificationMessage(message);\n    setShowNotification(true);\n    setTimeout(() => setShowNotification(false), 5000);\n  };\n  const transferFunds = async () => {\n    const parsedAmount = parseFloat(transferAmount);\n    if (!parsedAmount || parsedAmount <= 0) {\n      setMessageType(\"error\");\n      setMessage(\"Suma introdusă nu este validă.\");\n      return;\n    }\n    if (!toAccountId || toAccountId === \"\") {\n      setMessageType(\"error\");\n      setMessage(\"Te rugăm să selectezi un cont destinație.\");\n      return;\n    }\n    if (fromAccountId === toAccountId) {\n      setMessageType(\"error\");\n      setMessage(\"Nu poți transfera către același cont.\");\n      return;\n    }\n    const fromAccount = accounts.find(acc => acc.accountId === fromAccountId);\n    if (fromAccount && parsedAmount > fromAccount.balance) {\n      setMessageType(\"error\");\n      setMessage(\"Fonduri insuficiente pentru această tranzacție.\");\n      setTimeout(() => {\n        setMessage(\"\");\n        setMessageType(\"\");\n      }, 5000);\n      return;\n    }\n    try {\n      const response = await fetch(\"https://localhost:7157/api/Transactions/transfer\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          fromAccountId,\n          toAccountId,\n          amount: parsedAmount,\n          currency: \"RON\",\n          transactionType: \"Transfer\",\n          fromUserName,\n          toUserName\n        })\n      });\n      if (response.ok) {\n        setMessageType(\"success\");\n        setMessage(\"Transfer realizat cu succes!\");\n        showConfirmationNotification(\"Transfer realizat cu succes!\");\n        await fetchAccounts(); // Reîmprospătează conturile\n        setShowTransferForm(false);\n        setTransferAmount(\"\");\n        setTransferCurrency(\"RON\");\n        setToAccountId(\"\"); // Reset toAccountId\n      } else {\n        const errorData = await response.json();\n        setMessageType(\"error\");\n        setMessage(\"Eroare la transfer: \" + (errorData.message || \"necunoscută\"));\n      }\n    } catch (error) {\n      setMessageType(\"error\");\n      setMessage(\"Eroare: \" + error.message);\n    }\n    setTimeout(() => {\n      setMessage(\"\");\n      setMessageType(\"\");\n    }, 5000);\n  };\n  const transferBetweenUsers = async () => {\n    const parsedAmount = parseFloat(amount);\n    if (!parsedAmount || parsedAmount <= 0) {\n      setMessageType(\"error\");\n      setMessage(\"Suma introdusă nu este validă.\");\n      return;\n    }\n    if (!/^\\d+(\\.\\d{1,2})?$/.test(amount)) {\n      setMessageType(\"error\");\n      setMessage(\"Suma trebuie să aibă maximum 2 zecimale.\");\n      return;\n    }\n    if (!toUserName || toUserName.trim() === \"\") {\n      setMessageType(\"error\");\n      setMessage(\"Te rugăm să introduci numele utilizatorului destinație.\");\n      return;\n    }\n    if (fromUserName === toUserName) {\n      setMessageType(\"error\");\n      setMessage(\"Nu poți transfera către același utilizator.\");\n      return;\n    }\n    const fromAccount = accounts.find(acc => acc.accountId === fromAccountId);\n    if (fromAccount && parsedAmount > fromAccount.balance) {\n      setMessageType(\"error\");\n      setMessage(\"Fonduri insuficiente pentru această tranzacție.\");\n      setTimeout(() => {\n        setMessage(\"\");\n        setMessageType(\"\");\n      }, 5000);\n      return;\n    }\n    try {\n      const response = await fetch(\"https://localhost:7157/api/Transactions/transfer-between-users\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          FromUserName: fromUserName,\n          ToUserName: toUserName,\n          Amount: parsedAmount,\n          Currency: \"RON\",\n          TransactionType: \"Transfer\"\n        })\n      });\n      if (response.ok) {\n        setMessageType(\"success\");\n        setMessage(\"Transfer realizat cu succes!\");\n        showConfirmationNotification(\"Transfer către utilizator realizat cu succes!\");\n        await fetchAccounts(); // Reîmprospătează conturile\n        setShowTransferForm(false);\n        setAmount(\"\");\n        setCurrency(\"RON\");\n        setToUserName(\"\");\n      } else {\n        const errorData = await response.json();\n        setMessageType(\"error\");\n        setMessage(\"Eroare la transfer: \" + (errorData.message || \"necunoscută\"));\n      }\n    } catch (error) {\n      setMessageType(\"error\");\n      setMessage(\"Eroare: \" + error.message);\n    }\n    setTimeout(() => {\n      setMessage(\"\");\n      setMessageType(\"\");\n    }, 5000);\n  };\n\n  // Functia de creare a contului - actualizată\n  const createAccount = async () => {\n    if (!selectedAccountType) {\n      setCreateAccountMessageType(\"error\");\n      setCreateAccountMessage(\"Te rugăm să selectezi tipul de cont.\");\n      return;\n    }\n    try {\n      const response = await fetch(\"https://localhost:7157/api/Accounts\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId: user.userId,\n          accountType: selectedAccountType,\n          balance: 0,\n          currency: \"RON\"\n        })\n      });\n      if (response.ok) {\n        const newAccount = await response.json();\n        setCreateAccountMessageType(\"success\");\n        setCreateAccountMessage(`Contul ${selectedAccountType} a fost creat cu succes!`);\n        showConfirmationNotification(`Contul ${selectedAccountType} a fost creat cu succes!`);\n        await fetchAccounts(); // Reîmprospătăm conturile imediat\n\n        // Setăm tab-ul activ pe noul cont creat\n        setCurrentTab(selectedAccountType);\n\n        // Închidem modalul după un delay scurt pentru a vedea mesajul de succes\n        setTimeout(() => {\n          setShowCreateAccountModal(false);\n          setSelectedAccountType(\"\");\n          setCreateAccountMessage(\"\");\n          setCreateAccountMessageType(\"\");\n        }, 1500);\n      } else {\n        let errorMessage = \"Eroare necunoscută\";\n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.message || errorData.title || JSON.stringify(errorData); // Am adăugat JSON.stringify pentru obiecte\n        } catch {\n          try {\n            const errorText = await response.text();\n            errorMessage = errorText || `Eroare HTTP ${response.status}`;\n          } catch {\n            errorMessage = `Eroare HTTP ${response.status}`;\n          }\n        }\n        setCreateAccountMessageType(\"error\");\n        setCreateAccountMessage(errorMessage);\n        setTimeout(() => {\n          setCreateAccountMessage(\"\");\n          setCreateAccountMessageType(\"\");\n        }, 6000);\n      }\n    } catch (error) {\n      setCreateAccountMessageType(\"error\");\n      setCreateAccountMessage(\"Eroare de conectare: \" + error.message);\n      setTimeout(() => {\n        setCreateAccountMessage(\"\");\n        setCreateAccountMessageType(\"\");\n      }, 6000);\n    }\n  };\n  const formatNumber = number => {\n    if (number === undefined || number === null || isNaN(number)) {\n      return \"0\";\n    }\n    const num = typeof number === \"string\" ? parseFloat(number) : number;\n    return Number.isInteger(num) ? num.toString() : num.toFixed(2);\n  };\n  const handleDeleteAccount = account => {\n    // Adaugă verificarea pentru tipurile de cont care nu pot fi șterse\n    if (account.accountType === \"Personal\" || account.accountType === \"Cont Curent\") {\n      setDeleteMessageType(\"error\");\n      setDeleteMessage(`Contul ${account.accountType} nu poate fi șters.`);\n      // Poți alege să nu deschizi deloc modalul de confirmare, sau să-l deschizi doar cu mesajul de eroare\n      // Pentru simplitate, îl deschidem cu mesajul de eroare și nu permitem confirmarea.\n      setAccountToDelete(null); // Nu setezi accountToDelete dacă nu se poate șterge\n      setShowDeleteConfirm(true);\n      setTimeout(() => {\n        setDeleteMessage(\"\");\n        setDeleteMessageType(\"\");\n        setShowDeleteConfirm(false);\n      }, 5000); // Mesajul dispare după 5 secunde\n      return;\n    }\n    setAccountToDelete(account);\n    setShowDeleteConfirm(true);\n    setDeleteMessage(\"\");\n    setDeleteMessageType(\"\");\n  };\n  const confirmDeleteAccount = async () => {\n    if (!accountToDelete) {\n      console.error(\"No account selected for deletion\");\n      return;\n    }\n\n    // Verifică din nou dacă nu cumva contul este \"Personal\" sau \"Cont Curent\"\n    if (accountToDelete.accountType === \"Personal\" || accountToDelete.accountType === \"Cont Curent\") {\n      setDeleteMessageType(\"error\");\n      setDeleteMessage(`Contul ${accountToDelete.accountType} nu poate fi șters.`);\n      return; // Nu continua cu ștergerea\n    }\n    if (accountToDelete.balance > 0) {\n      setDeleteMessageType(\"error\");\n      setDeleteMessage(`Nu poți șterge acest cont deoarece are un sold de ${formatNumber(accountToDelete.balance)} ${accountToDelete.currency}.\\n` + `Te rugăm să transferi banii în alt cont înainte de a șterge acest cont.`);\n      return;\n    }\n    try {\n      const response = await fetch(`https://localhost:7157/api/Accounts/${accountToDelete.accountId}`, {\n        method: \"DELETE\"\n      });\n      if (response.ok) {\n        setDeleteMessageType(\"success\");\n        setDeleteMessage(\"Contul a fost șters cu succes.\");\n        showConfirmationNotification(\"Contul a fost șters cu succes!\");\n        setShowDeleteConfirm(false);\n        setAccountToDelete(null);\n        await fetchAccounts(); // Reîmprospătează conturile după ștergere\n      } else {\n        const errorText = await response.text();\n        setDeleteMessageType(\"error\");\n        setDeleteMessage(\"Eroare la ștergerea contului: \" + errorText);\n      }\n    } catch (error) {\n      setDeleteMessageType(\"error\");\n      setDeleteMessage(\"Eroare tehnică: \" + error.message);\n    }\n  };\n\n  // Lista tipurilor de conturi pe care utilizatorul le poate adăuga manual\n  const creatableAccountTypes = [{\n    name: \"Economii\",\n    description: \"Pentru economisirea banilor și obiective financiare\"\n  }, {\n    name: \"Investitii\",\n    description: \"Pentru investiții și tranzacții pe termen lung\"\n  }, {\n    name: \"Călătorii\",\n    description: \"Pentru fondurile alocate călătoriilor\"\n  }\n  // Adaugă aici și alte tipuri de conturi pe care vrei să le permiti utilizatorului să le creeze\n  // ex: { name: \"Mașină\", description: \"Pentru fondul de mașină\" }\n  ];\n  const accountTypes = [...new Set(accounts.map(acc => acc.accountType))];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-left logo-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"TrustPay Logo\",\n          className: \"header-logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"logo-text\",\n          children: \"Trust Pay - Siguran\\u021Ba banilor t\\u0103i!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-right\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"username\",\n          children: [\"Salut, \", user.userName, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: goToProfile,\n          children: \"Vezi Profilul\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chrome-tabs-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chrome-tabs-left\",\n        children: accountTypes.map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setCurrentTab(type),\n          className: `chrome-tab ${currentTab === type ? \"chrome-tab-active\" : \"\"}`,\n          children: type\n        }, type, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"create-account-button\",\n        onClick: () => setShowCreateAccountModal(true),\n        children: \"Creeaz\\u0103 cont\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: [accounts.filter(acc => acc.accountType === currentTab).map(acc => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"account-tab\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"account-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"account-title\",\n            children: acc.accountType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"balance-label\",\n            children: \"Balan\\u021B\\u0103:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"account-balance\",\n            children: [formatNumber(acc.balance), \" \", acc.currency]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"account-actions-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"account-actions-left\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"action-button transfer-button\",\n              onClick: () => {\n                setFromAccountId(acc.accountId);\n                setShowTransferForm(true);\n                setTransferType(\"funds\");\n              },\n              children: \"Mutare fonduri\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 19\n            }, this), acc.accountType === \"Personal\" && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"action-button transfer-button\",\n              onClick: () => {\n                setFromAccountId(acc.accountId);\n                setShowTransferForm(true);\n                setTransferType(\"user\");\n              },\n              children: \"Transfer c\\u0103tre alt utilizator\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 21\n            }, this), acc.accountType !== \"Cont Curent\" && acc.accountType !== \"Personal\" && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"action-button delete-button delete-button-red\",\n              onClick: () => handleDeleteAccount(acc),\n              children: \"\\u0218terge cont\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"account-actions-right\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"action-button history-button\",\n              onClick: () => {\n                navigate(\"/istoric-tranzactii\", {\n                  state: {\n                    account: acc\n                  },\n                  replace: false\n                });\n              },\n              children: \"Istoric Tranzac\\u021Bii\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 15\n        }, this)]\n      }, acc.accountId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 13\n      }, this)), accounts.length === 0 && currentTab === null && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-accounts-message\",\n        children: \"Nu ai \\xEEnc\\u0103 niciun cont. Apas\\u0103 \\\"Creeaz\\u0103 cont\\\" pentru a ad\\u0103uga unul!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 13\n      }, this), accounts.length > 0 && currentTab !== null && !accounts.some(acc => acc.accountType === currentTab) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-accounts-message\",\n        children: \"Contul curent nu mai exist\\u0103. Te rug\\u0103m s\\u0103 selectezi un alt cont.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 7\n    }, this), showCreateAccountModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-account-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"create-account-modal-title\",\n        children: \"Creeaz\\u0103 cont nou\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 11\n      }, this), creatableAccountTypes.map(type => !accounts.some(acc => acc.accountType === type.name) && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `account-type-option ${selectedAccountType === type.name ? \"selected\" : \"\"}`,\n        onClick: () => setSelectedAccountType(type.name),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"account-type-text\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: type.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: type.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 17\n        }, this)\n      }, type.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 15\n      }, this)), createAccountMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message-box ${createAccountMessageType}-message`,\n        children: createAccountMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-button\",\n          onClick: () => {\n            setShowCreateAccountModal(false);\n            setSelectedAccountType(\"\");\n            setCreateAccountMessage(\"\");\n            setCreateAccountMessageType(\"\");\n          },\n          children: \"Anuleaz\\u0103\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"submit-button\",\n          onClick: createAccount,\n          disabled: !selectedAccountType // Butonul este dezactivat dacă nu s-a selectat un tip\n          ,\n          children: \"Creeaz\\u0103 cont\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 9\n    }, this), showTransferForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transfer-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"transfer-modal-title\",\n        children: transferType === \"funds\" ? \"Transfer între conturi\" : \"Transfer către alt utilizator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 11\n      }, this), transferType === \"funds\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Din cont:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: fromAccountId,\n            disabled: true,\n            children: accounts.filter(acc => acc.accountId === fromAccountId).map(acc => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: acc.accountId,\n              children: [acc.accountType, \" (\", acc.balance, \" \", acc.currency, \")\"]\n            }, acc.accountId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 600,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"\\xCEn cont:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: toAccountId,\n            onChange: e => setToAccountId(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Selecteaz\\u0103 contul destina\\u021Bie\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 614,\n              columnNumber: 19\n            }, this), accounts.filter(acc => acc.accountId !== fromAccountId).map(acc => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: acc.accountId,\n              children: [acc.accountType, \" (\", acc.balance, \" \", acc.currency, \")\"]\n            }, acc.accountId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 618,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Sum\\u0103:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            className: \"form-control\",\n            value: transferAmount,\n            onChange: e => setTransferAmount(e.target.value),\n            min: \"0.01\",\n            step: \"0.01\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Moned\\u0103:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: \"RON\",\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cancel-button\",\n            onClick: () => setShowTransferForm(false),\n            children: \"Anulare\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"submit-button\",\n            onClick: transferFunds,\n            children: \"Transfer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 654,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"De la utilizator:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 662,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: fromUserName,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 663,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"C\\u0103tre utilizator:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: toUserName,\n            onChange: e => setToUserName(e.target.value),\n            placeholder: \"Nume utilizator destina\\u021Bie\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 673,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Sum\\u0103:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 683,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            className: \"form-control\",\n            value: amount,\n            onChange: e => setAmount(e.target.value),\n            min: \"0.01\",\n            step: \"0.01\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 684,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Moned\\u0103:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 695,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: \"RON\",\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cancel-button\",\n            onClick: () => setShowTransferForm(false),\n            children: \"Anulare\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 705,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"submit-button\",\n            onClick: transferBetweenUsers,\n            children: \"Transfer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message-box ${messageType === \"success\" ? \"success-message\" : messageType === \"error\" ? \"error-message\" : \"info-message\"}`,\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 722,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 9\n    }, this), showDeleteConfirm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"delete-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"delete-modal-title\",\n        children: \"Confirmare \\u0219tergere cont\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 740,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"delete-modal-content\",\n        children: [accountToDelete ?\n        /*#__PURE__*/\n        // Afișează detaliile contului doar dacă accountToDelete este setat\n        _jsxDEV(\"p\", {\n          children: [\"Sigur dore\\u0219ti s\\u0103 \\u0219tergi contul \", accountToDelete.accountType, \" (\", accountToDelete.currency, \")?\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Acest cont nu poate fi \\u0219ters.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 749,\n          columnNumber: 17\n        }, this) // Mesaj general dacă accountToDelete e null (e.g., pentru \"Personal\")\n        , deleteMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message-box ${deleteMessageType}-message`,\n          children: deleteMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-button\",\n          onClick: () => {\n            setShowDeleteConfirm(false);\n            setDeleteMessage(\"\"); // Resetează mesajul la închidere\n            setDeleteMessageType(\"\");\n          },\n          children: \"Anuleaz\\u0103\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 760,\n          columnNumber: 13\n        }, this), accountToDelete && accountToDelete.accountType !== \"Personal\" && accountToDelete.accountType !== \"Cont Curent\" && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"delete-confirm-button\",\n          onClick: confirmDeleteAccount,\n          children: \"\\u0218terge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 772,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 759,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 739,\n      columnNumber: 9\n    }, this), showNotification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification success-notification\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"notification-icon\",\n          children: \"\\u2713\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 786,\n          columnNumber: 13\n        }, this), notificationMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 784,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 408,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"mSXPIJTbkwex8T8OVFj6JNMl6mk=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","logo","useNavigate","Profile","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","user","onLogout","_s","accounts","setAccounts","currentTab","setCurrentTab","showTransferForm","setShowTransferForm","fromAccountId","setFromAccountId","toAccountId","setToAccountId","transferAmount","setTransferAmount","transferCurrency","setTransferCurrency","message","setMessage","messageType","setMessageType","transferType","setTransferType","toUserName","setToUserName","amount","setAmount","currency","setCurrency","fromUserName","userName","showNotification","setShowNotification","notificationMessage","setNotificationMessage","showDeleteConfirm","setShowDeleteConfirm","accountToDelete","setAccountToDelete","deleteMessage","setDeleteMessage","deleteMessageType","setDeleteMessageType","showCreateAccountModal","setShowCreateAccountModal","selectedAccountType","setSelectedAccountType","createAccountMessage","setCreateAccountMessage","createAccountMessageType","setCreateAccountMessageType","navigate","goToProfile","fetchAccounts","response","fetch","userId","data","json","Array","isArray","length","accountType","currentTabExists","some","acc","error","console","showConfirmationNotification","setTimeout","transferFunds","parsedAmount","parseFloat","fromAccount","find","accountId","balance","method","headers","body","JSON","stringify","transactionType","ok","errorData","transferBetweenUsers","test","trim","FromUserName","ToUserName","Amount","Currency","TransactionType","createAccount","newAccount","errorMessage","title","errorText","text","status","formatNumber","number","undefined","isNaN","num","Number","isInteger","toString","toFixed","handleDeleteAccount","account","confirmDeleteAccount","creatableAccountTypes","name","description","accountTypes","Set","map","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","filter","state","replace","disabled","value","onChange","e","target","min","step","readOnly","placeholder","_c","$RefreshReg$"],"sources":["D:/II/Proiect/proiect repository2/TrustPay_Project/TrustPay_corect/TrustPay-front_end/src/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Dashboard.css';\r\nimport logo from './logo1.png';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Profile from './Profile'; // Asigură-te că Profile este corect importat și utilizat dacă este cazul\r\n\r\nfunction Dashboard({ user, onLogout }) {\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [currentTab, setCurrentTab] = useState(null);\r\n  const [showTransferForm, setShowTransferForm] = useState(false);\r\n  const [fromAccountId, setFromAccountId] = useState(null);\r\n  const [toAccountId, setToAccountId] = useState(\"\");\r\n  const [transferAmount, setTransferAmount] = useState(\"\");\r\n  const [transferCurrency, setTransferCurrency] = useState(\"RON\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messageType, setMessageType] = useState(\"\");\r\n  const [transferType, setTransferType] = useState(null);\r\n  const [toUserName, setToUserName] = useState(\"\");\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [currency, setCurrency] = useState(\"RON\");\r\n  const [fromUserName] = useState(user.userName);\r\n  const [showNotification, setShowNotification] = useState(false);\r\n  const [notificationMessage, setNotificationMessage] = useState(\"\");\r\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\r\n  const [accountToDelete, setAccountToDelete] = useState(null);\r\n  const [deleteMessage, setDeleteMessage] = useState(\"\");\r\n  const [deleteMessageType, setDeleteMessageType] = useState(\"\");\r\n  const [showCreateAccountModal, setShowCreateAccountModal] = useState(false);\r\n  const [selectedAccountType, setSelectedAccountType] = useState(\"\");\r\n  const [createAccountMessage, setCreateAccountMessage] = useState(\"\");\r\n  const [createAccountMessageType, setCreateAccountMessageType] = useState(\"\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const goToProfile = () => {\r\n    navigate('/profile');\r\n  };\r\n\r\n  const fetchAccounts = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        `https://localhost:7157/api/Accounts/user/${user.userId}`\r\n      );\r\n      const data = await response.json();\r\n      if (Array.isArray(data) && data.length > 0) {\r\n        setAccounts(data);\r\n        // Set current tab to the first account's type if no tab is currently selected\r\n        if (currentTab === null) {\r\n          setCurrentTab(data[0].accountType);\r\n        } else {\r\n            // If the current tab (selectedAccountType after creation) is no longer valid,\r\n            // or if the account was deleted, switch to the first available account.\r\n            // This ensures a valid tab is always selected.\r\n            const currentTabExists = data.some(acc => acc.accountType === currentTab);\r\n            if (!currentTabExists && data.length > 0) {\r\n                setCurrentTab(data[0].accountType);\r\n            } else if (data.length === 0) {\r\n                setCurrentTab(null); // No accounts left\r\n            }\r\n        }\r\n      } else {\r\n        setAccounts([]);\r\n        setCurrentTab(null); // No accounts, no active tab\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching accounts:\", error);\r\n      // Handle cases where user has no accounts (e.g., first login, or all deleted)\r\n      setAccounts([]);\r\n      setCurrentTab(null);\r\n    }\r\n  };\r\n\r\n  // Re-fetch accounts when user.userId changes\r\n  useEffect(() => {\r\n    if (user && user.userId) {\r\n        fetchAccounts();\r\n    }\r\n  }, [user.userId]);\r\n\r\n  const showConfirmationNotification = (message) => {\r\n    setNotificationMessage(message);\r\n    setShowNotification(true);\r\n    setTimeout(() => setShowNotification(false), 5000);\r\n  };\r\n\r\n  const transferFunds = async () => {\r\n    const parsedAmount = parseFloat(transferAmount);\r\n    if (!parsedAmount || parsedAmount <= 0) {\r\n      setMessageType(\"error\");\r\n      setMessage(\"Suma introdusă nu este validă.\");\r\n      return;\r\n    }\r\n\r\n    if (!toAccountId || toAccountId === \"\") {\r\n      setMessageType(\"error\");\r\n      setMessage(\"Te rugăm să selectezi un cont destinație.\");\r\n      return;\r\n    }\r\n\r\n    if (fromAccountId === toAccountId) {\r\n      setMessageType(\"error\");\r\n      setMessage(\"Nu poți transfera către același cont.\");\r\n      return;\r\n    }\r\n\r\n    const fromAccount = accounts.find(acc => acc.accountId === fromAccountId);\r\n    if (fromAccount && parsedAmount > fromAccount.balance) {\r\n      setMessageType(\"error\");\r\n      setMessage(\"Fonduri insuficiente pentru această tranzacție.\");\r\n      setTimeout(() => {\r\n        setMessage(\"\");\r\n        setMessageType(\"\");\r\n      }, 5000);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        \"https://localhost:7157/api/Transactions/transfer\",\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            fromAccountId,\r\n            toAccountId,\r\n            amount: parsedAmount,\r\n            currency: \"RON\",\r\n            transactionType: \"Transfer\",\r\n            fromUserName,\r\n            toUserName,\r\n          }),\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        setMessageType(\"success\");\r\n        setMessage(\"Transfer realizat cu succes!\");\r\n        showConfirmationNotification(\"Transfer realizat cu succes!\");\r\n        await fetchAccounts(); // Reîmprospătează conturile\r\n        setShowTransferForm(false);\r\n        setTransferAmount(\"\");\r\n        setTransferCurrency(\"RON\");\r\n        setToAccountId(\"\"); // Reset toAccountId\r\n      } else {\r\n        const errorData = await response.json();\r\n        setMessageType(\"error\");\r\n        setMessage(\r\n          \"Eroare la transfer: \" + (errorData.message || \"necunoscută\")\r\n        );\r\n      }\r\n    } catch (error) {\r\n      setMessageType(\"error\");\r\n      setMessage(\"Eroare: \" + error.message);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      setMessage(\"\");\r\n      setMessageType(\"\");\r\n    }, 5000);\r\n  };\r\n\r\n  const transferBetweenUsers = async () => {\r\n    const parsedAmount = parseFloat(amount);\r\n\r\n    if (!parsedAmount || parsedAmount <= 0) {\r\n      setMessageType(\"error\");\r\n      setMessage(\"Suma introdusă nu este validă.\");\r\n      return;\r\n    }\r\n\r\n    if (!/^\\d+(\\.\\d{1,2})?$/.test(amount)) {\r\n      setMessageType(\"error\");\r\n      setMessage(\"Suma trebuie să aibă maximum 2 zecimale.\");\r\n      return;\r\n    }\r\n\r\n    if (!toUserName || toUserName.trim() === \"\") {\r\n      setMessageType(\"error\");\r\n      setMessage(\"Te rugăm să introduci numele utilizatorului destinație.\");\r\n      return;\r\n    }\r\n\r\n    if (fromUserName === toUserName) {\r\n      setMessageType(\"error\");\r\n      setMessage(\"Nu poți transfera către același utilizator.\");\r\n      return;\r\n    }\r\n\r\n    const fromAccount = accounts.find(acc => acc.accountId === fromAccountId);\r\n    if (fromAccount && parsedAmount > fromAccount.balance) {\r\n      setMessageType(\"error\");\r\n      setMessage(\"Fonduri insuficiente pentru această tranzacție.\");\r\n      setTimeout(() => {\r\n        setMessage(\"\");\r\n        setMessageType(\"\");\r\n      }, 5000);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        \"https://localhost:7157/api/Transactions/transfer-between-users\",\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            FromUserName: fromUserName,\r\n            ToUserName: toUserName,\r\n            Amount: parsedAmount,\r\n            Currency: \"RON\",\r\n            TransactionType: \"Transfer\",\r\n          }),\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        setMessageType(\"success\");\r\n        setMessage(\"Transfer realizat cu succes!\");\r\n        showConfirmationNotification(\"Transfer către utilizator realizat cu succes!\");\r\n        await fetchAccounts(); // Reîmprospătează conturile\r\n        setShowTransferForm(false);\r\n        setAmount(\"\");\r\n        setCurrency(\"RON\");\r\n        setToUserName(\"\");\r\n      } else {\r\n        const errorData = await response.json();\r\n        setMessageType(\"error\");\r\n        setMessage(\"Eroare la transfer: \" + (errorData.message || \"necunoscută\"));\r\n      }\r\n    } catch (error) {\r\n      setMessageType(\"error\");\r\n      setMessage(\"Eroare: \" + error.message);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      setMessage(\"\");\r\n      setMessageType(\"\");\r\n    }, 5000);\r\n  };\r\n\r\n  // Functia de creare a contului - actualizată\r\n  const createAccount = async () => {\r\n    if (!selectedAccountType) {\r\n      setCreateAccountMessageType(\"error\");\r\n      setCreateAccountMessage(\"Te rugăm să selectezi tipul de cont.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\"https://localhost:7157/api/Accounts\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          userId: user.userId,\r\n          accountType: selectedAccountType,\r\n          balance: 0,\r\n          currency: \"RON\",\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const newAccount = await response.json();\r\n        setCreateAccountMessageType(\"success\");\r\n        setCreateAccountMessage(`Contul ${selectedAccountType} a fost creat cu succes!`);\r\n        showConfirmationNotification(`Contul ${selectedAccountType} a fost creat cu succes!`);\r\n\r\n        await fetchAccounts(); // Reîmprospătăm conturile imediat\r\n\r\n        // Setăm tab-ul activ pe noul cont creat\r\n        setCurrentTab(selectedAccountType);\r\n\r\n        // Închidem modalul după un delay scurt pentru a vedea mesajul de succes\r\n        setTimeout(() => {\r\n          setShowCreateAccountModal(false);\r\n          setSelectedAccountType(\"\");\r\n          setCreateAccountMessage(\"\");\r\n          setCreateAccountMessageType(\"\");\r\n        }, 1500);\r\n\r\n      } else {\r\n        let errorMessage = \"Eroare necunoscută\";\r\n\r\n        try {\r\n          const errorData = await response.json();\r\n          errorMessage = errorData.message || errorData.title || JSON.stringify(errorData); // Am adăugat JSON.stringify pentru obiecte\r\n        } catch {\r\n          try {\r\n            const errorText = await response.text();\r\n            errorMessage = errorText || `Eroare HTTP ${response.status}`;\r\n          } catch {\r\n            errorMessage = `Eroare HTTP ${response.status}`;\r\n          }\r\n        }\r\n\r\n        setCreateAccountMessageType(\"error\");\r\n        setCreateAccountMessage(errorMessage);\r\n\r\n        setTimeout(() => {\r\n          setCreateAccountMessage(\"\");\r\n          setCreateAccountMessageType(\"\");\r\n        }, 6000);\r\n      }\r\n    } catch (error) {\r\n      setCreateAccountMessageType(\"error\");\r\n      setCreateAccountMessage(\"Eroare de conectare: \" + error.message);\r\n\r\n      setTimeout(() => {\r\n        setCreateAccountMessage(\"\");\r\n        setCreateAccountMessageType(\"\");\r\n      }, 6000);\r\n    }\r\n  };\r\n\r\n\r\n  const formatNumber = (number) => {\r\n    if (number === undefined || number === null || isNaN(number)) {\r\n      return \"0\";\r\n    }\r\n    const num = typeof number === \"string\" ? parseFloat(number) : number;\r\n    return Number.isInteger(num) ? num.toString() : num.toFixed(2);\r\n  };\r\n\r\n  const handleDeleteAccount = (account) => {\r\n    // Adaugă verificarea pentru tipurile de cont care nu pot fi șterse\r\n    if (account.accountType === \"Personal\" || account.accountType === \"Cont Curent\") {\r\n        setDeleteMessageType(\"error\");\r\n        setDeleteMessage(`Contul ${account.accountType} nu poate fi șters.`);\r\n        // Poți alege să nu deschizi deloc modalul de confirmare, sau să-l deschizi doar cu mesajul de eroare\r\n        // Pentru simplitate, îl deschidem cu mesajul de eroare și nu permitem confirmarea.\r\n        setAccountToDelete(null); // Nu setezi accountToDelete dacă nu se poate șterge\r\n        setShowDeleteConfirm(true);\r\n        setTimeout(() => {\r\n          setDeleteMessage(\"\");\r\n          setDeleteMessageType(\"\");\r\n          setShowDeleteConfirm(false);\r\n        }, 5000); // Mesajul dispare după 5 secunde\r\n        return;\r\n    }\r\n\r\n    setAccountToDelete(account);\r\n    setShowDeleteConfirm(true);\r\n    setDeleteMessage(\"\");\r\n    setDeleteMessageType(\"\");\r\n  };\r\n\r\n  const confirmDeleteAccount = async () => {\r\n    if (!accountToDelete) {\r\n      console.error(\"No account selected for deletion\");\r\n      return;\r\n    }\r\n\r\n    // Verifică din nou dacă nu cumva contul este \"Personal\" sau \"Cont Curent\"\r\n    if (accountToDelete.accountType === \"Personal\" || accountToDelete.accountType === \"Cont Curent\") {\r\n      setDeleteMessageType(\"error\");\r\n      setDeleteMessage(`Contul ${accountToDelete.accountType} nu poate fi șters.`);\r\n      return; // Nu continua cu ștergerea\r\n    }\r\n\r\n    if (accountToDelete.balance > 0) {\r\n      setDeleteMessageType(\"error\");\r\n      setDeleteMessage(\r\n        `Nu poți șterge acest cont deoarece are un sold de ${formatNumber(accountToDelete.balance)} ${accountToDelete.currency}.\\n` +\r\n          `Te rugăm să transferi banii în alt cont înainte de a șterge acest cont.`\r\n      );\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://localhost:7157/api/Accounts/${accountToDelete.accountId}`,\r\n        {\r\n          method: \"DELETE\",\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        setDeleteMessageType(\"success\");\r\n        setDeleteMessage(\"Contul a fost șters cu succes.\");\r\n        showConfirmationNotification(\"Contul a fost șters cu succes!\");\r\n\r\n        setShowDeleteConfirm(false);\r\n        setAccountToDelete(null);\r\n        await fetchAccounts(); // Reîmprospătează conturile după ștergere\r\n\r\n      } else {\r\n        const errorText = await response.text();\r\n        setDeleteMessageType(\"error\");\r\n        setDeleteMessage(\"Eroare la ștergerea contului: \" + errorText);\r\n      }\r\n    } catch (error) {\r\n      setDeleteMessageType(\"error\");\r\n      setDeleteMessage(\"Eroare tehnică: \" + error.message);\r\n    }\r\n  };\r\n\r\n  // Lista tipurilor de conturi pe care utilizatorul le poate adăuga manual\r\n  const creatableAccountTypes = [\r\n    { name: \"Economii\", description: \"Pentru economisirea banilor și obiective financiare\" },\r\n    { name: \"Investitii\", description: \"Pentru investiții și tranzacții pe termen lung\" },\r\n    { name: \"Călătorii\", description: \"Pentru fondurile alocate călătoriilor\" },\r\n    // Adaugă aici și alte tipuri de conturi pe care vrei să le permiti utilizatorului să le creeze\r\n    // ex: { name: \"Mașină\", description: \"Pentru fondul de mașină\" }\r\n  ];\r\n\r\n  const accountTypes = [...new Set(accounts.map((acc) => acc.accountType))];\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <header className=\"header\">\r\n        <div className=\"header-left logo-container\">\r\n          <img src={logo} alt=\"TrustPay Logo\" className=\"header-logo\" />\r\n          <span className=\"logo-text\">Trust Pay - Siguranța banilor tăi!</span>\r\n        </div>\r\n        <div className=\"header-right\">\r\n          <span className=\"username\">Salut, {user.userName}!</span>\r\n          <button onClick={goToProfile}>Vezi Profilul</button>\r\n          <button onClick={onLogout}>Logout</button>\r\n        </div>\r\n      </header>\r\n\r\n      {/* Elimină complet create-account-section */}\r\n\r\n      <div className=\"chrome-tabs-container\">\r\n        <div className=\"chrome-tabs-left\">\r\n          {accountTypes.map((type) => (\r\n            <button\r\n              key={type}\r\n              onClick={() => setCurrentTab(type)}\r\n              className={`chrome-tab ${\r\n                currentTab === type ? \"chrome-tab-active\" : \"\"\r\n              }`}\r\n            >\r\n              {type}\r\n            </button>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Butonul Creează cont în dreapta */}\r\n        <button\r\n          className=\"create-account-button\"\r\n          onClick={() => setShowCreateAccountModal(true)}\r\n        >\r\n          Creează cont\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"tab-content\">\r\n        {accounts\r\n          .filter((acc) => acc.accountType === currentTab)\r\n          .map((acc) => (\r\n            <div key={acc.accountId} className=\"account-tab\">\r\n              <div className=\"account-info\">\r\n                <h3 className=\"account-title\">{acc.accountType}</h3>\r\n                <div className=\"balance-label\">Balanță:</div>\r\n                <p className=\"account-balance\">\r\n                  {formatNumber(acc.balance)} {acc.currency}\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"account-actions-container\">\r\n                <div className=\"account-actions-left\">\r\n                  <button\r\n                    className=\"action-button transfer-button\"\r\n                    onClick={() => {\r\n                      setFromAccountId(acc.accountId);\r\n                      setShowTransferForm(true);\r\n                      setTransferType(\"funds\");\r\n                    }}\r\n                  >\r\n                    Mutare fonduri\r\n                  </button>\r\n\r\n                  {/* Transfer către alt utilizator - doar pentru contul Personal */}\r\n                  {acc.accountType === \"Personal\" && (\r\n                    <button\r\n                      className=\"action-button transfer-button\"\r\n                      onClick={() => {\r\n                        setFromAccountId(acc.accountId);\r\n                        setShowTransferForm(true);\r\n                        setTransferType(\"user\");\r\n                      }}\r\n                    >\r\n                      Transfer către alt utilizator\r\n                    </button>\r\n                  )}\r\n\r\n                  {/* Butonul Șterge cont - NU este afișat pentru \"Personal\" sau \"Cont Curent\" */}\r\n                  {acc.accountType !== \"Cont Curent\" && acc.accountType !== \"Personal\" && (\r\n                    <button\r\n                      className=\"action-button delete-button delete-button-red\"\r\n                      onClick={() => handleDeleteAccount(acc)}\r\n                    >\r\n                      Șterge cont\r\n                    </button>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"account-actions-right\">\r\n                  <button\r\n                    className=\"action-button history-button\"\r\n                    onClick={() => {\r\n                      navigate(\"/istoric-tranzactii\", {\r\n                        state: { account: acc },\r\n                        replace: false,\r\n                      });\r\n                    }}\r\n                  >\r\n                    Istoric Tranzacții\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n\r\n          {/* Mesaj dacă nu există conturi pentru tab-ul selectat sau deloc */}\r\n          {accounts.length === 0 && currentTab === null && (\r\n            <div className=\"no-accounts-message\">\r\n                Nu ai încă niciun cont. Apasă \"Creează cont\" pentru a adăuga unul!\r\n            </div>\r\n          )}\r\n          {accounts.length > 0 && currentTab !== null && !accounts.some(acc => acc.accountType === currentTab) && (\r\n            <div className=\"no-accounts-message\">\r\n                Contul curent nu mai există. Te rugăm să selectezi un alt cont.\r\n            </div>\r\n          )}\r\n      </div>\r\n\r\n      {/* Create Account Modal */}\r\n      {showCreateAccountModal && (\r\n        <div className=\"create-account-modal\">\r\n          <h3 className=\"create-account-modal-title\">Creează cont nou</h3>\r\n\r\n          {/* Afisează butoanele doar pentru tipurile de cont pe care userul NU le are deja */}\r\n          {creatableAccountTypes.map(type => (\r\n            !accounts.some(acc => acc.accountType === type.name) && (\r\n              <button\r\n                key={type.name}\r\n                className={`account-type-option ${selectedAccountType === type.name ? \"selected\" : \"\"}`}\r\n                onClick={() => setSelectedAccountType(type.name)}\r\n              >\r\n                <div className=\"account-type-text\">\r\n                  <strong>{type.name}</strong>\r\n                  <p>{type.description}</p>\r\n                </div>\r\n              </button>\r\n            )\r\n          ))}\r\n\r\n          {/* Mesaj de eroare/succes pentru crearea contului */}\r\n          {createAccountMessage && (\r\n            <div className={`message-box ${createAccountMessageType}-message`}>\r\n              {createAccountMessage}\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"modal-actions\">\r\n            <button\r\n              className=\"cancel-button\"\r\n              onClick={() => {\r\n                setShowCreateAccountModal(false);\r\n                setSelectedAccountType(\"\");\r\n                setCreateAccountMessage(\"\");\r\n                setCreateAccountMessageType(\"\");\r\n              }}\r\n            >\r\n              Anulează\r\n            </button>\r\n            <button\r\n              className=\"submit-button\"\r\n              onClick={createAccount}\r\n              disabled={!selectedAccountType} // Butonul este dezactivat dacă nu s-a selectat un tip\r\n            >\r\n              Creează cont\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Transfer Forms (remains unchanged) */}\r\n      {showTransferForm && (\r\n        <div className=\"transfer-modal\">\r\n          <h3 className=\"transfer-modal-title\">\r\n            {transferType === \"funds\"\r\n              ? \"Transfer între conturi\"\r\n              : \"Transfer către alt utilizator\"}\r\n          </h3>\r\n\r\n          {transferType === \"funds\" ? (\r\n            <>\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">Din cont:</label>\r\n                <select\r\n                  className=\"form-control\"\r\n                  value={fromAccountId}\r\n                  disabled={true}\r\n                >\r\n                  {accounts\r\n                    .filter((acc) => acc.accountId === fromAccountId)\r\n                    .map((acc) => (\r\n                      <option key={acc.accountId} value={acc.accountId}>\r\n                        {acc.accountType} ({acc.balance} {acc.currency})\r\n                      </option>\r\n                    ))}\r\n                </select>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">În cont:</label>\r\n                <select\r\n                  className=\"form-control\"\r\n                  value={toAccountId}\r\n                  onChange={(e) => setToAccountId(e.target.value)}\r\n                >\r\n                  <option value=\"\" disabled>Selectează contul destinație</option>\r\n                  {accounts\r\n                    .filter((acc) => acc.accountId !== fromAccountId)\r\n                    .map((acc) => (\r\n                      <option key={acc.accountId} value={acc.accountId}>\r\n                        {acc.accountType} ({acc.balance} {acc.currency})\r\n                      </option>\r\n                    ))}\r\n                </select>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">Sumă:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  className=\"form-control\"\r\n                  value={transferAmount}\r\n                  onChange={(e) => setTransferAmount(e.target.value)}\r\n                  min=\"0.01\"\r\n                  step=\"0.01\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">Monedă:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  value=\"RON\"\r\n                  readOnly\r\n                />\r\n              </div>\r\n\r\n              <div className=\"modal-actions\">\r\n                <button\r\n                  className=\"cancel-button\"\r\n                  onClick={() => setShowTransferForm(false)}\r\n                >\r\n                  Anulare\r\n                </button>\r\n                <button className=\"submit-button\" onClick={transferFunds}>\r\n                  Transfer\r\n                </button>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">De la utilizator:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  value={fromUserName}\r\n                  disabled={true}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">Către utilizator:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  value={toUserName}\r\n                  onChange={(e) => setToUserName(e.target.value)}\r\n                  placeholder=\"Nume utilizator destinație\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">Sumă:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  className=\"form-control\"\r\n                  value={amount}\r\n                  onChange={(e) => setAmount(e.target.value)}\r\n                  min=\"0.01\"\r\n                  step=\"0.01\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label className=\"form-label\">Monedă:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  value=\"RON\"\r\n                  readOnly\r\n                />\r\n              </div>\r\n\r\n              <div className=\"modal-actions\">\r\n                <button\r\n                  className=\"cancel-button\"\r\n                  onClick={() => setShowTransferForm(false)}\r\n                >\r\n                  Anulare\r\n                </button>\r\n                <button\r\n                  className=\"submit-button\"\r\n                  onClick={transferBetweenUsers}\r\n                >\r\n                  Transfer\r\n                </button>\r\n              </div>\r\n            </>\r\n          )}\r\n\r\n          {message && (\r\n            <div\r\n              className={`message-box ${\r\n                messageType === \"success\"\r\n                  ? \"success-message\"\r\n                  : messageType === \"error\"\r\n                  ? \"error-message\"\r\n                  : \"info-message\"\r\n              }`}\r\n            >\r\n              {message}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Modal de confirmare pentru ștergerea contului */}\r\n      {showDeleteConfirm && (\r\n        <div className=\"delete-modal\">\r\n          <h3 className=\"delete-modal-title\">Confirmare ștergere cont</h3>\r\n\r\n          <div className=\"delete-modal-content\">\r\n            {accountToDelete ? ( // Afișează detaliile contului doar dacă accountToDelete este setat\r\n                <p>\r\n                    Sigur dorești să ștergi contul {accountToDelete.accountType} (\r\n                    {accountToDelete.currency})?\r\n                </p>\r\n            ) : (\r\n                <p>Acest cont nu poate fi șters.</p> // Mesaj general dacă accountToDelete e null (e.g., pentru \"Personal\")\r\n            )}\r\n\r\n            {deleteMessage && (\r\n              <div className={`message-box ${deleteMessageType}-message`}>\r\n                {deleteMessage}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"modal-actions\">\r\n            <button\r\n              className=\"cancel-button\"\r\n              onClick={() => {\r\n                setShowDeleteConfirm(false);\r\n                setDeleteMessage(\"\"); // Resetează mesajul la închidere\r\n                setDeleteMessageType(\"\");\r\n              }}\r\n            >\r\n              Anulează\r\n            </button>\r\n            {/* Butonul de ștergere este afișat doar dacă accountToDelete este setat și nu este un cont non-ștergibil */}\r\n            {accountToDelete && accountToDelete.accountType !== \"Personal\" && accountToDelete.accountType !== \"Cont Curent\" && (\r\n                <button\r\n                    className=\"delete-confirm-button\"\r\n                    onClick={confirmDeleteAccount}\r\n                >\r\n                    Șterge\r\n                </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {showNotification && (\r\n        <div className=\"notification success-notification\">\r\n          <div className=\"notification-content\">\r\n            <span className=\"notification-icon\">✓</span>\r\n            {notificationMessage}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,iBAAiB;AACxB,OAAOC,IAAI,MAAM,aAAa;AAC9B,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,OAAO,MAAM,WAAW,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEjC,SAASC,SAASA,CAAC;EAAEC,IAAI;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACrC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACgB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACsB,cAAc,EAAEC,iBAAiB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACwB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAAC0B,OAAO,EAAEC,UAAU,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC4B,WAAW,EAAEC,cAAc,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC8B,YAAY,EAAEC,eAAe,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACgC,UAAU,EAAEC,aAAa,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACkC,MAAM,EAAEC,SAAS,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACoC,QAAQ,EAAEC,WAAW,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACsC,YAAY,CAAC,GAAGtC,QAAQ,CAACS,IAAI,CAAC8B,QAAQ,CAAC;EAC9C,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAAC0C,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EAClE,MAAM,CAAC4C,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG7C,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAAC8C,eAAe,EAAEC,kBAAkB,CAAC,GAAG/C,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACgD,aAAa,EAAEC,gBAAgB,CAAC,GAAGjD,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACkD,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGnD,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACoD,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGrD,QAAQ,CAAC,KAAK,CAAC;EAC3E,MAAM,CAACsD,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGvD,QAAQ,CAAC,EAAE,CAAC;EAClE,MAAM,CAACwD,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGzD,QAAQ,CAAC,EAAE,CAAC;EACpE,MAAM,CAAC0D,wBAAwB,EAAEC,2BAA2B,CAAC,GAAG3D,QAAQ,CAAC,EAAE,CAAC;EAE5E,MAAM4D,QAAQ,GAAG1D,WAAW,CAAC,CAAC;EAE9B,MAAM2D,WAAW,GAAGA,CAAA,KAAM;IACxBD,QAAQ,CAAC,UAAU,CAAC;EACtB,CAAC;EAED,MAAME,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,4CAA4CvD,IAAI,CAACwD,MAAM,EACzD,CAAC;MACD,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClC,IAAIC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,IAAIA,IAAI,CAACI,MAAM,GAAG,CAAC,EAAE;QAC1CzD,WAAW,CAACqD,IAAI,CAAC;QACjB;QACA,IAAIpD,UAAU,KAAK,IAAI,EAAE;UACvBC,aAAa,CAACmD,IAAI,CAAC,CAAC,CAAC,CAACK,WAAW,CAAC;QACpC,CAAC,MAAM;UACH;UACA;UACA;UACA,MAAMC,gBAAgB,GAAGN,IAAI,CAACO,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACH,WAAW,KAAKzD,UAAU,CAAC;UACzE,IAAI,CAAC0D,gBAAgB,IAAIN,IAAI,CAACI,MAAM,GAAG,CAAC,EAAE;YACtCvD,aAAa,CAACmD,IAAI,CAAC,CAAC,CAAC,CAACK,WAAW,CAAC;UACtC,CAAC,MAAM,IAAIL,IAAI,CAACI,MAAM,KAAK,CAAC,EAAE;YAC1BvD,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;UACzB;QACJ;MACF,CAAC,MAAM;QACLF,WAAW,CAAC,EAAE,CAAC;QACfE,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;MACvB;IACF,CAAC,CAAC,OAAO4D,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD;MACA9D,WAAW,CAAC,EAAE,CAAC;MACfE,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC;;EAED;EACAhB,SAAS,CAAC,MAAM;IACd,IAAIU,IAAI,IAAIA,IAAI,CAACwD,MAAM,EAAE;MACrBH,aAAa,CAAC,CAAC;IACnB;EACF,CAAC,EAAE,CAACrD,IAAI,CAACwD,MAAM,CAAC,CAAC;EAEjB,MAAMY,4BAA4B,GAAInD,OAAO,IAAK;IAChDiB,sBAAsB,CAACjB,OAAO,CAAC;IAC/Be,mBAAmB,CAAC,IAAI,CAAC;IACzBqC,UAAU,CAAC,MAAMrC,mBAAmB,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;EACpD,CAAC;EAED,MAAMsC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,MAAMC,YAAY,GAAGC,UAAU,CAAC3D,cAAc,CAAC;IAC/C,IAAI,CAAC0D,YAAY,IAAIA,YAAY,IAAI,CAAC,EAAE;MACtCnD,cAAc,CAAC,OAAO,CAAC;MACvBF,UAAU,CAAC,gCAAgC,CAAC;MAC5C;IACF;IAEA,IAAI,CAACP,WAAW,IAAIA,WAAW,KAAK,EAAE,EAAE;MACtCS,cAAc,CAAC,OAAO,CAAC;MACvBF,UAAU,CAAC,2CAA2C,CAAC;MACvD;IACF;IAEA,IAAIT,aAAa,KAAKE,WAAW,EAAE;MACjCS,cAAc,CAAC,OAAO,CAAC;MACvBF,UAAU,CAAC,uCAAuC,CAAC;MACnD;IACF;IAEA,MAAMuD,WAAW,GAAGtE,QAAQ,CAACuE,IAAI,CAACT,GAAG,IAAIA,GAAG,CAACU,SAAS,KAAKlE,aAAa,CAAC;IACzE,IAAIgE,WAAW,IAAIF,YAAY,GAAGE,WAAW,CAACG,OAAO,EAAE;MACrDxD,cAAc,CAAC,OAAO,CAAC;MACvBF,UAAU,CAAC,iDAAiD,CAAC;MAC7DmD,UAAU,CAAC,MAAM;QACfnD,UAAU,CAAC,EAAE,CAAC;QACdE,cAAc,CAAC,EAAE,CAAC;MACpB,CAAC,EAAE,IAAI,CAAC;MACR;IACF;IAEA,IAAI;MACF,MAAMkC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,kDAAkD,EAClD;QACEsB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBxE,aAAa;UACbE,WAAW;UACXc,MAAM,EAAE8C,YAAY;UACpB5C,QAAQ,EAAE,KAAK;UACfuD,eAAe,EAAE,UAAU;UAC3BrD,YAAY;UACZN;QACF,CAAC;MACH,CACF,CAAC;MAED,IAAI+B,QAAQ,CAAC6B,EAAE,EAAE;QACf/D,cAAc,CAAC,SAAS,CAAC;QACzBF,UAAU,CAAC,8BAA8B,CAAC;QAC1CkD,4BAA4B,CAAC,8BAA8B,CAAC;QAC5D,MAAMf,aAAa,CAAC,CAAC,CAAC,CAAC;QACvB7C,mBAAmB,CAAC,KAAK,CAAC;QAC1BM,iBAAiB,CAAC,EAAE,CAAC;QACrBE,mBAAmB,CAAC,KAAK,CAAC;QAC1BJ,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;MACtB,CAAC,MAAM;QACL,MAAMwE,SAAS,GAAG,MAAM9B,QAAQ,CAACI,IAAI,CAAC,CAAC;QACvCtC,cAAc,CAAC,OAAO,CAAC;QACvBF,UAAU,CACR,sBAAsB,IAAIkE,SAAS,CAACnE,OAAO,IAAI,aAAa,CAC9D,CAAC;MACH;IACF,CAAC,CAAC,OAAOiD,KAAK,EAAE;MACd9C,cAAc,CAAC,OAAO,CAAC;MACvBF,UAAU,CAAC,UAAU,GAAGgD,KAAK,CAACjD,OAAO,CAAC;IACxC;IAEAoD,UAAU,CAAC,MAAM;MACfnD,UAAU,CAAC,EAAE,CAAC;MACdE,cAAc,CAAC,EAAE,CAAC;IACpB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAMiE,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,MAAMd,YAAY,GAAGC,UAAU,CAAC/C,MAAM,CAAC;IAEvC,IAAI,CAAC8C,YAAY,IAAIA,YAAY,IAAI,CAAC,EAAE;MACtCnD,cAAc,CAAC,OAAO,CAAC;MACvBF,UAAU,CAAC,gCAAgC,CAAC;MAC5C;IACF;IAEA,IAAI,CAAC,mBAAmB,CAACoE,IAAI,CAAC7D,MAAM,CAAC,EAAE;MACrCL,cAAc,CAAC,OAAO,CAAC;MACvBF,UAAU,CAAC,0CAA0C,CAAC;MACtD;IACF;IAEA,IAAI,CAACK,UAAU,IAAIA,UAAU,CAACgE,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC3CnE,cAAc,CAAC,OAAO,CAAC;MACvBF,UAAU,CAAC,yDAAyD,CAAC;MACrE;IACF;IAEA,IAAIW,YAAY,KAAKN,UAAU,EAAE;MAC/BH,cAAc,CAAC,OAAO,CAAC;MACvBF,UAAU,CAAC,6CAA6C,CAAC;MACzD;IACF;IAEA,MAAMuD,WAAW,GAAGtE,QAAQ,CAACuE,IAAI,CAACT,GAAG,IAAIA,GAAG,CAACU,SAAS,KAAKlE,aAAa,CAAC;IACzE,IAAIgE,WAAW,IAAIF,YAAY,GAAGE,WAAW,CAACG,OAAO,EAAE;MACrDxD,cAAc,CAAC,OAAO,CAAC;MACvBF,UAAU,CAAC,iDAAiD,CAAC;MAC7DmD,UAAU,CAAC,MAAM;QACfnD,UAAU,CAAC,EAAE,CAAC;QACdE,cAAc,CAAC,EAAE,CAAC;MACpB,CAAC,EAAE,IAAI,CAAC;MACR;IACF;IAEA,IAAI;MACF,MAAMkC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,gEAAgE,EAChE;QACEsB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBO,YAAY,EAAE3D,YAAY;UAC1B4D,UAAU,EAAElE,UAAU;UACtBmE,MAAM,EAAEnB,YAAY;UACpBoB,QAAQ,EAAE,KAAK;UACfC,eAAe,EAAE;QACnB,CAAC;MACH,CACF,CAAC;MAED,IAAItC,QAAQ,CAAC6B,EAAE,EAAE;QACf/D,cAAc,CAAC,SAAS,CAAC;QACzBF,UAAU,CAAC,8BAA8B,CAAC;QAC1CkD,4BAA4B,CAAC,+CAA+C,CAAC;QAC7E,MAAMf,aAAa,CAAC,CAAC,CAAC,CAAC;QACvB7C,mBAAmB,CAAC,KAAK,CAAC;QAC1BkB,SAAS,CAAC,EAAE,CAAC;QACbE,WAAW,CAAC,KAAK,CAAC;QAClBJ,aAAa,CAAC,EAAE,CAAC;MACnB,CAAC,MAAM;QACL,MAAM4D,SAAS,GAAG,MAAM9B,QAAQ,CAACI,IAAI,CAAC,CAAC;QACvCtC,cAAc,CAAC,OAAO,CAAC;QACvBF,UAAU,CAAC,sBAAsB,IAAIkE,SAAS,CAACnE,OAAO,IAAI,aAAa,CAAC,CAAC;MAC3E;IACF,CAAC,CAAC,OAAOiD,KAAK,EAAE;MACd9C,cAAc,CAAC,OAAO,CAAC;MACvBF,UAAU,CAAC,UAAU,GAAGgD,KAAK,CAACjD,OAAO,CAAC;IACxC;IAEAoD,UAAU,CAAC,MAAM;MACfnD,UAAU,CAAC,EAAE,CAAC;MACdE,cAAc,CAAC,EAAE,CAAC;IACpB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;;EAED;EACA,MAAMyE,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAAChD,mBAAmB,EAAE;MACxBK,2BAA2B,CAAC,OAAO,CAAC;MACpCF,uBAAuB,CAAC,sCAAsC,CAAC;MAC/D;IACF;IAEA,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEsB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBzB,MAAM,EAAExD,IAAI,CAACwD,MAAM;UACnBM,WAAW,EAAEjB,mBAAmB;UAChC+B,OAAO,EAAE,CAAC;UACVjD,QAAQ,EAAE;QACZ,CAAC;MACH,CAAC,CAAC;MAEF,IAAI2B,QAAQ,CAAC6B,EAAE,EAAE;QACf,MAAMW,UAAU,GAAG,MAAMxC,QAAQ,CAACI,IAAI,CAAC,CAAC;QACxCR,2BAA2B,CAAC,SAAS,CAAC;QACtCF,uBAAuB,CAAC,UAAUH,mBAAmB,0BAA0B,CAAC;QAChFuB,4BAA4B,CAAC,UAAUvB,mBAAmB,0BAA0B,CAAC;QAErF,MAAMQ,aAAa,CAAC,CAAC,CAAC,CAAC;;QAEvB;QACA/C,aAAa,CAACuC,mBAAmB,CAAC;;QAElC;QACAwB,UAAU,CAAC,MAAM;UACfzB,yBAAyB,CAAC,KAAK,CAAC;UAChCE,sBAAsB,CAAC,EAAE,CAAC;UAC1BE,uBAAuB,CAAC,EAAE,CAAC;UAC3BE,2BAA2B,CAAC,EAAE,CAAC;QACjC,CAAC,EAAE,IAAI,CAAC;MAEV,CAAC,MAAM;QACL,IAAI6C,YAAY,GAAG,oBAAoB;QAEvC,IAAI;UACF,MAAMX,SAAS,GAAG,MAAM9B,QAAQ,CAACI,IAAI,CAAC,CAAC;UACvCqC,YAAY,GAAGX,SAAS,CAACnE,OAAO,IAAImE,SAAS,CAACY,KAAK,IAAIhB,IAAI,CAACC,SAAS,CAACG,SAAS,CAAC,CAAC,CAAC;QACpF,CAAC,CAAC,MAAM;UACN,IAAI;YACF,MAAMa,SAAS,GAAG,MAAM3C,QAAQ,CAAC4C,IAAI,CAAC,CAAC;YACvCH,YAAY,GAAGE,SAAS,IAAI,eAAe3C,QAAQ,CAAC6C,MAAM,EAAE;UAC9D,CAAC,CAAC,MAAM;YACNJ,YAAY,GAAG,eAAezC,QAAQ,CAAC6C,MAAM,EAAE;UACjD;QACF;QAEAjD,2BAA2B,CAAC,OAAO,CAAC;QACpCF,uBAAuB,CAAC+C,YAAY,CAAC;QAErC1B,UAAU,CAAC,MAAM;UACfrB,uBAAuB,CAAC,EAAE,CAAC;UAC3BE,2BAA2B,CAAC,EAAE,CAAC;QACjC,CAAC,EAAE,IAAI,CAAC;MACV;IACF,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACdhB,2BAA2B,CAAC,OAAO,CAAC;MACpCF,uBAAuB,CAAC,uBAAuB,GAAGkB,KAAK,CAACjD,OAAO,CAAC;MAEhEoD,UAAU,CAAC,MAAM;QACfrB,uBAAuB,CAAC,EAAE,CAAC;QAC3BE,2BAA2B,CAAC,EAAE,CAAC;MACjC,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC;EAGD,MAAMkD,YAAY,GAAIC,MAAM,IAAK;IAC/B,IAAIA,MAAM,KAAKC,SAAS,IAAID,MAAM,KAAK,IAAI,IAAIE,KAAK,CAACF,MAAM,CAAC,EAAE;MAC5D,OAAO,GAAG;IACZ;IACA,MAAMG,GAAG,GAAG,OAAOH,MAAM,KAAK,QAAQ,GAAG7B,UAAU,CAAC6B,MAAM,CAAC,GAAGA,MAAM;IACpE,OAAOI,MAAM,CAACC,SAAS,CAACF,GAAG,CAAC,GAAGA,GAAG,CAACG,QAAQ,CAAC,CAAC,GAAGH,GAAG,CAACI,OAAO,CAAC,CAAC,CAAC;EAChE,CAAC;EAED,MAAMC,mBAAmB,GAAIC,OAAO,IAAK;IACvC;IACA,IAAIA,OAAO,CAAChD,WAAW,KAAK,UAAU,IAAIgD,OAAO,CAAChD,WAAW,KAAK,aAAa,EAAE;MAC7EpB,oBAAoB,CAAC,OAAO,CAAC;MAC7BF,gBAAgB,CAAC,UAAUsE,OAAO,CAAChD,WAAW,qBAAqB,CAAC;MACpE;MACA;MACAxB,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;MAC1BF,oBAAoB,CAAC,IAAI,CAAC;MAC1BiC,UAAU,CAAC,MAAM;QACf7B,gBAAgB,CAAC,EAAE,CAAC;QACpBE,oBAAoB,CAAC,EAAE,CAAC;QACxBN,oBAAoB,CAAC,KAAK,CAAC;MAC7B,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MACV;IACJ;IAEAE,kBAAkB,CAACwE,OAAO,CAAC;IAC3B1E,oBAAoB,CAAC,IAAI,CAAC;IAC1BI,gBAAgB,CAAC,EAAE,CAAC;IACpBE,oBAAoB,CAAC,EAAE,CAAC;EAC1B,CAAC;EAED,MAAMqE,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAI,CAAC1E,eAAe,EAAE;MACpB8B,OAAO,CAACD,KAAK,CAAC,kCAAkC,CAAC;MACjD;IACF;;IAEA;IACA,IAAI7B,eAAe,CAACyB,WAAW,KAAK,UAAU,IAAIzB,eAAe,CAACyB,WAAW,KAAK,aAAa,EAAE;MAC/FpB,oBAAoB,CAAC,OAAO,CAAC;MAC7BF,gBAAgB,CAAC,UAAUH,eAAe,CAACyB,WAAW,qBAAqB,CAAC;MAC5E,OAAO,CAAC;IACV;IAEA,IAAIzB,eAAe,CAACuC,OAAO,GAAG,CAAC,EAAE;MAC/BlC,oBAAoB,CAAC,OAAO,CAAC;MAC7BF,gBAAgB,CACd,qDAAqD4D,YAAY,CAAC/D,eAAe,CAACuC,OAAO,CAAC,IAAIvC,eAAe,CAACV,QAAQ,KAAK,GACzH,yEACJ,CAAC;MACD;IACF;IAEA,IAAI;MACF,MAAM2B,QAAQ,GAAG,MAAMC,KAAK,CAC1B,uCAAuClB,eAAe,CAACsC,SAAS,EAAE,EAClE;QACEE,MAAM,EAAE;MACV,CACF,CAAC;MAED,IAAIvB,QAAQ,CAAC6B,EAAE,EAAE;QACfzC,oBAAoB,CAAC,SAAS,CAAC;QAC/BF,gBAAgB,CAAC,gCAAgC,CAAC;QAClD4B,4BAA4B,CAAC,gCAAgC,CAAC;QAE9DhC,oBAAoB,CAAC,KAAK,CAAC;QAC3BE,kBAAkB,CAAC,IAAI,CAAC;QACxB,MAAMe,aAAa,CAAC,CAAC,CAAC,CAAC;MAEzB,CAAC,MAAM;QACL,MAAM4C,SAAS,GAAG,MAAM3C,QAAQ,CAAC4C,IAAI,CAAC,CAAC;QACvCxD,oBAAoB,CAAC,OAAO,CAAC;QAC7BF,gBAAgB,CAAC,gCAAgC,GAAGyD,SAAS,CAAC;MAChE;IACF,CAAC,CAAC,OAAO/B,KAAK,EAAE;MACdxB,oBAAoB,CAAC,OAAO,CAAC;MAC7BF,gBAAgB,CAAC,kBAAkB,GAAG0B,KAAK,CAACjD,OAAO,CAAC;IACtD;EACF,CAAC;;EAED;EACA,MAAM+F,qBAAqB,GAAG,CAC5B;IAAEC,IAAI,EAAE,UAAU;IAAEC,WAAW,EAAE;EAAsD,CAAC,EACxF;IAAED,IAAI,EAAE,YAAY;IAAEC,WAAW,EAAE;EAAiD,CAAC,EACrF;IAAED,IAAI,EAAE,WAAW;IAAEC,WAAW,EAAE;EAAwC;EAC1E;EACA;EAAA,CACD;EAED,MAAMC,YAAY,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACjH,QAAQ,CAACkH,GAAG,CAAEpD,GAAG,IAAKA,GAAG,CAACH,WAAW,CAAC,CAAC,CAAC;EAEzE,oBACElE,OAAA;IAAK0H,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5B3H,OAAA;MAAQ0H,SAAS,EAAC,QAAQ;MAAAC,QAAA,gBACxB3H,OAAA;QAAK0H,SAAS,EAAC,4BAA4B;QAAAC,QAAA,gBACzC3H,OAAA;UAAK4H,GAAG,EAAEhI,IAAK;UAACiI,GAAG,EAAC,eAAe;UAACH,SAAS,EAAC;QAAa;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC9DjI,OAAA;UAAM0H,SAAS,EAAC,WAAW;UAAAC,QAAA,EAAC;QAAkC;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClE,CAAC,eACNjI,OAAA;QAAK0H,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3B3H,OAAA;UAAM0H,SAAS,EAAC,UAAU;UAAAC,QAAA,GAAC,SAAO,EAACvH,IAAI,CAAC8B,QAAQ,EAAC,GAAC;QAAA;UAAA4F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACzDjI,OAAA;UAAQkI,OAAO,EAAE1E,WAAY;UAAAmE,QAAA,EAAC;QAAa;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACpDjI,OAAA;UAAQkI,OAAO,EAAE7H,QAAS;UAAAsH,QAAA,EAAC;QAAM;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eAITjI,OAAA;MAAK0H,SAAS,EAAC,uBAAuB;MAAAC,QAAA,gBACpC3H,OAAA;QAAK0H,SAAS,EAAC,kBAAkB;QAAAC,QAAA,EAC9BJ,YAAY,CAACE,GAAG,CAAEU,IAAI,iBACrBnI,OAAA;UAEEkI,OAAO,EAAEA,CAAA,KAAMxH,aAAa,CAACyH,IAAI,CAAE;UACnCT,SAAS,EAAE,cACTjH,UAAU,KAAK0H,IAAI,GAAG,mBAAmB,GAAG,EAAE,EAC7C;UAAAR,QAAA,EAEFQ;QAAI,GANAA,IAAI;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOH,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAGNjI,OAAA;QACE0H,SAAS,EAAC,uBAAuB;QACjCQ,OAAO,EAAEA,CAAA,KAAMlF,yBAAyB,CAAC,IAAI,CAAE;QAAA2E,QAAA,EAChD;MAED;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAENjI,OAAA;MAAK0H,SAAS,EAAC,aAAa;MAAAC,QAAA,GACzBpH,QAAQ,CACN6H,MAAM,CAAE/D,GAAG,IAAKA,GAAG,CAACH,WAAW,KAAKzD,UAAU,CAAC,CAC/CgH,GAAG,CAAEpD,GAAG,iBACPrE,OAAA;QAAyB0H,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC9C3H,OAAA;UAAK0H,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3B3H,OAAA;YAAI0H,SAAS,EAAC,eAAe;YAAAC,QAAA,EAAEtD,GAAG,CAACH;UAAW;YAAA4D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACpDjI,OAAA;YAAK0H,SAAS,EAAC,eAAe;YAAAC,QAAA,EAAC;UAAQ;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC7CjI,OAAA;YAAG0H,SAAS,EAAC,iBAAiB;YAAAC,QAAA,GAC3BnB,YAAY,CAACnC,GAAG,CAACW,OAAO,CAAC,EAAC,GAAC,EAACX,GAAG,CAACtC,QAAQ;UAAA;YAAA+F,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,eAENjI,OAAA;UAAK0H,SAAS,EAAC,2BAA2B;UAAAC,QAAA,gBACxC3H,OAAA;YAAK0H,SAAS,EAAC,sBAAsB;YAAAC,QAAA,gBACnC3H,OAAA;cACE0H,SAAS,EAAC,+BAA+B;cACzCQ,OAAO,EAAEA,CAAA,KAAM;gBACbpH,gBAAgB,CAACuD,GAAG,CAACU,SAAS,CAAC;gBAC/BnE,mBAAmB,CAAC,IAAI,CAAC;gBACzBc,eAAe,CAAC,OAAO,CAAC;cAC1B,CAAE;cAAAiG,QAAA,EACH;YAED;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EAGR5D,GAAG,CAACH,WAAW,KAAK,UAAU,iBAC7BlE,OAAA;cACE0H,SAAS,EAAC,+BAA+B;cACzCQ,OAAO,EAAEA,CAAA,KAAM;gBACbpH,gBAAgB,CAACuD,GAAG,CAACU,SAAS,CAAC;gBAC/BnE,mBAAmB,CAAC,IAAI,CAAC;gBACzBc,eAAe,CAAC,MAAM,CAAC;cACzB,CAAE;cAAAiG,QAAA,EACH;YAED;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CACT,EAGA5D,GAAG,CAACH,WAAW,KAAK,aAAa,IAAIG,GAAG,CAACH,WAAW,KAAK,UAAU,iBAClElE,OAAA;cACE0H,SAAS,EAAC,+CAA+C;cACzDQ,OAAO,EAAEA,CAAA,KAAMjB,mBAAmB,CAAC5C,GAAG,CAAE;cAAAsD,QAAA,EACzC;YAED;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CACT;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eAENjI,OAAA;YAAK0H,SAAS,EAAC,uBAAuB;YAAAC,QAAA,eACpC3H,OAAA;cACE0H,SAAS,EAAC,8BAA8B;cACxCQ,OAAO,EAAEA,CAAA,KAAM;gBACb3E,QAAQ,CAAC,qBAAqB,EAAE;kBAC9B8E,KAAK,EAAE;oBAAEnB,OAAO,EAAE7C;kBAAI,CAAC;kBACvBiE,OAAO,EAAE;gBACX,CAAC,CAAC;cACJ,CAAE;cAAAX,QAAA,EACH;YAED;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA,GA5DE5D,GAAG,CAACU,SAAS;QAAA+C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OA6DlB,CACN,CAAC,EAGD1H,QAAQ,CAAC0D,MAAM,KAAK,CAAC,IAAIxD,UAAU,KAAK,IAAI,iBAC3CT,OAAA;QAAK0H,SAAS,EAAC,qBAAqB;QAAAC,QAAA,EAAC;MAErC;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACN,EACA1H,QAAQ,CAAC0D,MAAM,GAAG,CAAC,IAAIxD,UAAU,KAAK,IAAI,IAAI,CAACF,QAAQ,CAAC6D,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACH,WAAW,KAAKzD,UAAU,CAAC,iBAClGT,OAAA;QAAK0H,SAAS,EAAC,qBAAqB;QAAAC,QAAA,EAAC;MAErC;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,EAGLlF,sBAAsB,iBACrB/C,OAAA;MAAK0H,SAAS,EAAC,sBAAsB;MAAAC,QAAA,gBACnC3H,OAAA;QAAI0H,SAAS,EAAC,4BAA4B;QAAAC,QAAA,EAAC;MAAgB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAG/Db,qBAAqB,CAACK,GAAG,CAACU,IAAI,IAC7B,CAAC5H,QAAQ,CAAC6D,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACH,WAAW,KAAKiE,IAAI,CAACd,IAAI,CAAC,iBAClDrH,OAAA;QAEE0H,SAAS,EAAE,uBAAuBzE,mBAAmB,KAAKkF,IAAI,CAACd,IAAI,GAAG,UAAU,GAAG,EAAE,EAAG;QACxFa,OAAO,EAAEA,CAAA,KAAMhF,sBAAsB,CAACiF,IAAI,CAACd,IAAI,CAAE;QAAAM,QAAA,eAEjD3H,OAAA;UAAK0H,SAAS,EAAC,mBAAmB;UAAAC,QAAA,gBAChC3H,OAAA;YAAA2H,QAAA,EAASQ,IAAI,CAACd;UAAI;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,eAC5BjI,OAAA;YAAA2H,QAAA,EAAIQ,IAAI,CAACb;UAAW;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtB;MAAC,GAPDE,IAAI,CAACd,IAAI;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQR,CAEX,CAAC,EAGD9E,oBAAoB,iBACnBnD,OAAA;QAAK0H,SAAS,EAAE,eAAerE,wBAAwB,UAAW;QAAAsE,QAAA,EAC/DxE;MAAoB;QAAA2E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB,CACN,eAEDjI,OAAA;QAAK0H,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5B3H,OAAA;UACE0H,SAAS,EAAC,eAAe;UACzBQ,OAAO,EAAEA,CAAA,KAAM;YACblF,yBAAyB,CAAC,KAAK,CAAC;YAChCE,sBAAsB,CAAC,EAAE,CAAC;YAC1BE,uBAAuB,CAAC,EAAE,CAAC;YAC3BE,2BAA2B,CAAC,EAAE,CAAC;UACjC,CAAE;UAAAqE,QAAA,EACH;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTjI,OAAA;UACE0H,SAAS,EAAC,eAAe;UACzBQ,OAAO,EAAEjC,aAAc;UACvBsC,QAAQ,EAAE,CAACtF,mBAAoB,CAAC;UAAA;UAAA0E,QAAA,EACjC;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,EAGAtH,gBAAgB,iBACfX,OAAA;MAAK0H,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7B3H,OAAA;QAAI0H,SAAS,EAAC,sBAAsB;QAAAC,QAAA,EACjClG,YAAY,KAAK,OAAO,GACrB,wBAAwB,GACxB;MAA+B;QAAAqG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC,EAEJxG,YAAY,KAAK,OAAO,gBACvBzB,OAAA,CAAAE,SAAA;QAAAyH,QAAA,gBACE3H,OAAA;UAAK0H,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB3H,OAAA;YAAO0H,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAC;UAAS;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC/CjI,OAAA;YACE0H,SAAS,EAAC,cAAc;YACxBc,KAAK,EAAE3H,aAAc;YACrB0H,QAAQ,EAAE,IAAK;YAAAZ,QAAA,EAEdpH,QAAQ,CACN6H,MAAM,CAAE/D,GAAG,IAAKA,GAAG,CAACU,SAAS,KAAKlE,aAAa,CAAC,CAChD4G,GAAG,CAAEpD,GAAG,iBACPrE,OAAA;cAA4BwI,KAAK,EAAEnE,GAAG,CAACU,SAAU;cAAA4C,QAAA,GAC9CtD,GAAG,CAACH,WAAW,EAAC,IAAE,EAACG,GAAG,CAACW,OAAO,EAAC,GAAC,EAACX,GAAG,CAACtC,QAAQ,EAAC,GACjD;YAAA,GAFasC,GAAG,CAACU,SAAS;cAAA+C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAElB,CACT;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAENjI,OAAA;UAAK0H,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB3H,OAAA;YAAO0H,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAC;UAAQ;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC9CjI,OAAA;YACE0H,SAAS,EAAC,cAAc;YACxBc,KAAK,EAAEzH,WAAY;YACnB0H,QAAQ,EAAGC,CAAC,IAAK1H,cAAc,CAAC0H,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;YAAAb,QAAA,gBAEhD3H,OAAA;cAAQwI,KAAK,EAAC,EAAE;cAACD,QAAQ;cAAAZ,QAAA,EAAC;YAA4B;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EAC9D1H,QAAQ,CACN6H,MAAM,CAAE/D,GAAG,IAAKA,GAAG,CAACU,SAAS,KAAKlE,aAAa,CAAC,CAChD4G,GAAG,CAAEpD,GAAG,iBACPrE,OAAA;cAA4BwI,KAAK,EAAEnE,GAAG,CAACU,SAAU;cAAA4C,QAAA,GAC9CtD,GAAG,CAACH,WAAW,EAAC,IAAE,EAACG,GAAG,CAACW,OAAO,EAAC,GAAC,EAACX,GAAG,CAACtC,QAAQ,EAAC,GACjD;YAAA,GAFasC,GAAG,CAACU,SAAS;cAAA+C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAElB,CACT,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAENjI,OAAA;UAAK0H,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB3H,OAAA;YAAO0H,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAC;UAAK;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC3CjI,OAAA;YACEmI,IAAI,EAAC,QAAQ;YACbT,SAAS,EAAC,cAAc;YACxBc,KAAK,EAAEvH,cAAe;YACtBwH,QAAQ,EAAGC,CAAC,IAAKxH,iBAAiB,CAACwH,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;YACnDI,GAAG,EAAC,MAAM;YACVC,IAAI,EAAC;UAAM;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACZ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAENjI,OAAA;UAAK0H,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB3H,OAAA;YAAO0H,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAC;UAAO;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC7CjI,OAAA;YACEmI,IAAI,EAAC,MAAM;YACXT,SAAS,EAAC,cAAc;YACxBc,KAAK,EAAC,KAAK;YACXM,QAAQ;UAAA;YAAAhB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAENjI,OAAA;UAAK0H,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5B3H,OAAA;YACE0H,SAAS,EAAC,eAAe;YACzBQ,OAAO,EAAEA,CAAA,KAAMtH,mBAAmB,CAAC,KAAK,CAAE;YAAA+G,QAAA,EAC3C;UAED;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTjI,OAAA;YAAQ0H,SAAS,EAAC,eAAe;YAACQ,OAAO,EAAExD,aAAc;YAAAiD,QAAA,EAAC;UAE1D;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA,eACN,CAAC,gBAEHjI,OAAA,CAAAE,SAAA;QAAAyH,QAAA,gBACE3H,OAAA;UAAK0H,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB3H,OAAA;YAAO0H,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAC;UAAiB;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACvDjI,OAAA;YACEmI,IAAI,EAAC,MAAM;YACXT,SAAS,EAAC,cAAc;YACxBc,KAAK,EAAEvG,YAAa;YACpBsG,QAAQ,EAAE;UAAK;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAENjI,OAAA;UAAK0H,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB3H,OAAA;YAAO0H,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAC;UAAiB;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACvDjI,OAAA;YACEmI,IAAI,EAAC,MAAM;YACXT,SAAS,EAAC,cAAc;YACxBc,KAAK,EAAE7G,UAAW;YAClB8G,QAAQ,EAAGC,CAAC,IAAK9G,aAAa,CAAC8G,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;YAC/CO,WAAW,EAAC;UAA4B;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAENjI,OAAA;UAAK0H,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB3H,OAAA;YAAO0H,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAC;UAAK;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC3CjI,OAAA;YACEmI,IAAI,EAAC,QAAQ;YACbT,SAAS,EAAC,cAAc;YACxBc,KAAK,EAAE3G,MAAO;YACd4G,QAAQ,EAAGC,CAAC,IAAK5G,SAAS,CAAC4G,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;YAC3CI,GAAG,EAAC,MAAM;YACVC,IAAI,EAAC;UAAM;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACZ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAENjI,OAAA;UAAK0H,SAAS,EAAC,YAAY;UAAAC,QAAA,gBACzB3H,OAAA;YAAO0H,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAC;UAAO;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC7CjI,OAAA;YACEmI,IAAI,EAAC,MAAM;YACXT,SAAS,EAAC,cAAc;YACxBc,KAAK,EAAC,KAAK;YACXM,QAAQ;UAAA;YAAAhB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAENjI,OAAA;UAAK0H,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5B3H,OAAA;YACE0H,SAAS,EAAC,eAAe;YACzBQ,OAAO,EAAEA,CAAA,KAAMtH,mBAAmB,CAAC,KAAK,CAAE;YAAA+G,QAAA,EAC3C;UAED;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTjI,OAAA;YACE0H,SAAS,EAAC,eAAe;YACzBQ,OAAO,EAAEzC,oBAAqB;YAAAkC,QAAA,EAC/B;UAED;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA,eACN,CACH,EAEA5G,OAAO,iBACNrB,OAAA;QACE0H,SAAS,EAAE,eACTnG,WAAW,KAAK,SAAS,GACrB,iBAAiB,GACjBA,WAAW,KAAK,OAAO,GACvB,eAAe,GACf,cAAc,EACjB;QAAAoG,QAAA,EAEFtG;MAAO;QAAAyG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN,EAGA1F,iBAAiB,iBAChBvC,OAAA;MAAK0H,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3B3H,OAAA;QAAI0H,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAAwB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAEhEjI,OAAA;QAAK0H,SAAS,EAAC,sBAAsB;QAAAC,QAAA,GAClClF,eAAe;QAAA;QAAK;QACjBzC,OAAA;UAAA2H,QAAA,GAAG,gDACgC,EAAClF,eAAe,CAACyB,WAAW,EAAC,IAC5D,EAACzB,eAAe,CAACV,QAAQ,EAAC,IAC9B;QAAA;UAAA+F,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,gBAEJjI,OAAA;UAAA2H,QAAA,EAAG;QAA6B;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,CAAC;QACxC,EAEAtF,aAAa,iBACZ3C,OAAA;UAAK0H,SAAS,EAAE,eAAe7E,iBAAiB,UAAW;UAAA8E,QAAA,EACxDhF;QAAa;UAAAmF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACX,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAENjI,OAAA;QAAK0H,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5B3H,OAAA;UACE0H,SAAS,EAAC,eAAe;UACzBQ,OAAO,EAAEA,CAAA,KAAM;YACb1F,oBAAoB,CAAC,KAAK,CAAC;YAC3BI,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;YACtBE,oBAAoB,CAAC,EAAE,CAAC;UAC1B,CAAE;UAAA6E,QAAA,EACH;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAERxF,eAAe,IAAIA,eAAe,CAACyB,WAAW,KAAK,UAAU,IAAIzB,eAAe,CAACyB,WAAW,KAAK,aAAa,iBAC3GlE,OAAA;UACI0H,SAAS,EAAC,uBAAuB;UACjCQ,OAAO,EAAEf,oBAAqB;UAAAQ,QAAA,EACjC;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACX;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,EAEA9F,gBAAgB,iBACfnC,OAAA;MAAK0H,SAAS,EAAC,mCAAmC;MAAAC,QAAA,eAChD3H,OAAA;QAAK0H,SAAS,EAAC,sBAAsB;QAAAC,QAAA,gBACnC3H,OAAA;UAAM0H,SAAS,EAAC,mBAAmB;UAAAC,QAAA,EAAC;QAAC;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,EAC3C5F,mBAAmB;MAAA;QAAAyF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC3H,EAAA,CAlxBQH,SAAS;EAAA,QA0BCN,WAAW;AAAA;AAAAmJ,EAAA,GA1BrB7I,SAAS;AAoxBlB,eAAeA,SAAS;AAAC,IAAA6I,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}