{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrada\\\\Documents\\\\semestru 2\\\\proiect repository2\\\\TrustPay_Project\\\\TrustPay_corect\\\\TrustPay-front_end\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './Dashboard.css';\nimport logo from './logo1.png';\nimport { useNavigate } from 'react-router-dom';\nimport Profile from './Profile'; // Asigură-te că Profile este corect importat și utilizat dacă este cazul\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Dashboard({\n  user,\n  onLogout\n}) {\n  _s();\n  const [accounts, setAccounts] = useState([]);\n  const [currentTab, setCurrentTab] = useState(null);\n  const [showTransferForm, setShowTransferForm] = useState(false);\n  const [fromAccountId, setFromAccountId] = useState(null);\n  const [toAccountId, setToAccountId] = useState(\"\");\n  const [transferAmount, setTransferAmount] = useState(\"\");\n  const [transferCurrency, setTransferCurrency] = useState(\"RON\");\n  const [message, setMessage] = useState(\"\");\n  const [messageType, setMessageType] = useState(\"\");\n  const [transferType, setTransferType] = useState(null);\n  const [toUserName, setToUserName] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [currency, setCurrency] = useState(\"RON\");\n  const [fromUserName] = useState(user.userName);\n  const [showNotification, setShowNotification] = useState(false);\n  const [notificationMessage, setNotificationMessage] = useState(\"\");\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n  const [accountToDelete, setAccountToDelete] = useState(null);\n  const [deleteMessage, setDeleteMessage] = useState(\"\");\n  const [deleteMessageType, setDeleteMessageType] = useState(\"\");\n  const [showCreateAccountModal, setShowCreateAccountModal] = useState(false);\n  const [selectedAccountType, setSelectedAccountType] = useState(\"\");\n  const [createAccountMessage, setCreateAccountMessage] = useState(\"\");\n  const [createAccountMessageType, setCreateAccountMessageType] = useState(\"\");\n  const [userAccounts, setUserAccounts] = useState([]);\n  const navigate = useNavigate();\n  const goToProfile = () => {\n    navigate('/profile');\n  };\n  const fetchAccounts = async () => {\n    try {\n      const response = await fetch(`https://localhost:7157/api/Accounts/user/${user.userId}`);\n      const data = await response.json();\n      if (Array.isArray(data) && data.length > 0) {\n        setAccounts(data);\n        // Set current tab to the first account's type if no tab is currently selected\n        if (currentTab === null) {\n          setCurrentTab(data[0].accountType);\n        } else {\n          // If the current tab (selectedAccountType after creation) is no longer valid,\n          // or if the account was deleted, switch to the first available account.\n          // This ensures a valid tab is always selected.\n          const currentTabExists = data.some(acc => acc.accountType === currentTab);\n          if (!currentTabExists && data.length > 0) {\n            setCurrentTab(data[0].accountType);\n          } else if (data.length === 0) {\n            setCurrentTab(null); // No accounts left\n          }\n        }\n      } else {\n        setAccounts([]);\n        setCurrentTab(null); // No accounts, no active tab\n      }\n    } catch (error) {\n      console.error(\"Error fetching accounts:\", error);\n      // Handle cases where user has no accounts (e.g., first login, or all deleted)\n      setAccounts([]);\n      setCurrentTab(null);\n    }\n  };\n\n  // Re-fetch accounts when user.userId changes\n  useEffect(() => {\n    if (user && user.userId) {\n      fetchAccounts();\n    }\n  }, [user.userId]);\n  const showConfirmationNotification = message => {\n    setNotificationMessage(message);\n    setShowNotification(true);\n    setTimeout(() => setShowNotification(false), 5000);\n  };\n  const transferFunds = async () => {\n    const parsedAmount = parseFloat(transferAmount);\n    if (!parsedAmount || parsedAmount <= 0) {\n      setMessageType(\"error\");\n      setMessage(\"Suma introdusă nu este validă.\");\n      return;\n    }\n    if (!toAccountId || toAccountId === \"\") {\n      setMessageType(\"error\");\n      setMessage(\"Te rugăm să selectezi un cont destinație.\");\n      return;\n    }\n    if (fromAccountId === toAccountId) {\n      setMessageType(\"error\");\n      setMessage(\"Nu poți transfera către același cont.\");\n      return;\n    }\n    const fromAccount = accounts.find(acc => acc.accountId === fromAccountId);\n    if (fromAccount && parsedAmount > fromAccount.balance) {\n      setMessageType(\"error\");\n      setMessage(\"Fonduri insuficiente pentru această tranzacție.\");\n      setTimeout(() => {\n        setMessage(\"\");\n        setMessageType(\"\");\n      }, 5000);\n      return;\n    }\n    try {\n      const response = await fetch(\"https://localhost:7157/api/Transactions/transfer\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          fromAccountId,\n          toAccountId,\n          amount: parsedAmount,\n          currency: \"RON\",\n          transactionType: \"Transfer\",\n          fromUserName,\n          toUserName\n        })\n      });\n      if (response.ok) {\n        setMessageType(\"success\");\n        setMessage(\"Transfer realizat cu succes!\");\n        showConfirmationNotification(\"Transfer realizat cu succes!\");\n        await fetchAccounts(); // Reîmprospătează conturile\n        setShowTransferForm(false);\n        setTransferAmount(\"\");\n        setTransferCurrency(\"RON\");\n        setToAccountId(\"\"); // Reset toAccountId\n      } else {\n        const errorData = await response.json();\n        setMessageType(\"error\");\n        setMessage(\"Eroare la transfer: \" + (errorData.message || \"necunoscută\"));\n      }\n    } catch (error) {\n      setMessageType(\"error\");\n      setMessage(\"Eroare: \" + error.message);\n    }\n    setTimeout(() => {\n      setMessage(\"\");\n      setMessageType(\"\");\n    }, 5000);\n  };\n  const transferBetweenUsers = async () => {\n    const parsedAmount = parseFloat(amount);\n    if (!parsedAmount || parsedAmount <= 0) {\n      setMessageType(\"error\");\n      setMessage(\"Suma introdusă nu este validă.\");\n      return;\n    }\n    if (!/^\\d+(\\.\\d{1,2})?$/.test(amount)) {\n      setMessageType(\"error\");\n      setMessage(\"Suma trebuie să aibă maximum 2 zecimale.\");\n      return;\n    }\n    if (!toUserName || toUserName.trim() === \"\") {\n      setMessageType(\"error\");\n      setMessage(\"Te rugăm să introduci numele utilizatorului destinație.\");\n      return;\n    }\n    if (fromUserName === toUserName) {\n      setMessageType(\"error\");\n      setMessage(\"Nu poți transfera către același utilizator.\");\n      return;\n    }\n    const fromAccount = accounts.find(acc => acc.accountId === fromAccountId);\n    if (fromAccount && parsedAmount > fromAccount.balance) {\n      setMessageType(\"error\");\n      setMessage(\"Fonduri insuficiente pentru această tranzacție.\");\n      setTimeout(() => {\n        setMessage(\"\");\n        setMessageType(\"\");\n      }, 5000);\n      return;\n    }\n    try {\n      const response = await fetch(\"https://localhost:7157/api/Transactions/transfer-between-users\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          FromUserName: fromUserName,\n          ToUserName: toUserName,\n          Amount: parsedAmount,\n          Currency: \"RON\",\n          TransactionType: \"Transfer\"\n        })\n      });\n      if (response.ok) {\n        setMessageType(\"success\");\n        setMessage(\"Transfer realizat cu succes!\");\n        showConfirmationNotification(\"Transfer către utilizator realizat cu succes!\");\n        await fetchAccounts(); // Reîmprospătează conturile\n        setShowTransferForm(false);\n        setAmount(\"\");\n        setCurrency(\"RON\");\n        setToUserName(\"\");\n      } else {\n        const errorData = await response.json();\n        setMessageType(\"error\");\n        setMessage(\"Eroare la transfer: \" + (errorData.message || \"necunoscută\"));\n      }\n    } catch (error) {\n      setMessageType(\"error\");\n      setMessage(\"Eroare: \" + error.message);\n    }\n    setTimeout(() => {\n      setMessage(\"\");\n      setMessageType(\"\");\n    }, 5000);\n  };\n\n  // Functia de creare a contului - actualizată\n  const createAccount = async () => {\n    if (!selectedAccountType) {\n      setCreateAccountMessageType(\"error\");\n      setCreateAccountMessage(\"Te rugăm să selectezi tipul de cont.\");\n      return;\n    }\n    try {\n      const response = await fetch(\"https://localhost:7157/api/Accounts\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId: user.userId,\n          accountType: selectedAccountType,\n          balance: 0,\n          currency: \"RON\"\n        })\n      });\n      if (response.ok) {\n        const newAccount = await response.json();\n        setCreateAccountMessageType(\"success\");\n        setCreateAccountMessage(`Contul ${selectedAccountType} a fost creat cu succes!`);\n        showConfirmationNotification(`Contul ${selectedAccountType} a fost creat cu succes!`);\n        await fetchAccounts(); // Reîmprospătăm conturile imediat\n\n        // Setăm tab-ul activ pe noul cont creat\n        setCurrentTab(selectedAccountType);\n\n        // Închidem modalul după un delay scurt pentru a vedea mesajul de succes\n        setTimeout(() => {\n          setShowCreateAccountModal(false);\n          setSelectedAccountType(\"\");\n          setCreateAccountMessage(\"\");\n          setCreateAccountMessageType(\"\");\n        }, 1500);\n      } else {\n        let errorMessage = \"Eroare necunoscută\";\n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.message || errorData.title || JSON.stringify(errorData); // Am adăugat JSON.stringify pentru obiecte\n        } catch {\n          try {\n            const errorText = await response.text();\n            errorMessage = errorText || `Eroare HTTP ${response.status}`;\n          } catch {\n            errorMessage = `Eroare HTTP ${response.status}`;\n          }\n        }\n        setCreateAccountMessageType(\"error\");\n        setCreateAccountMessage(errorMessage);\n        setTimeout(() => {\n          setCreateAccountMessage(\"\");\n          setCreateAccountMessageType(\"\");\n        }, 6000);\n      }\n    } catch (error) {\n      setCreateAccountMessageType(\"error\");\n      setCreateAccountMessage(\"Eroare de conectare: \" + error.message);\n      setTimeout(() => {\n        setCreateAccountMessage(\"\");\n        setCreateAccountMessageType(\"\");\n      }, 6000);\n    }\n  };\n  const formatNumber = number => {\n    if (number === undefined || number === null || isNaN(number)) {\n      return \"0\";\n    }\n    const num = typeof number === \"string\" ? parseFloat(number) : number;\n    return Number.isInteger(num) ? num.toString() : num.toFixed(2);\n  };\n  const handleDeleteAccount = account => {\n    // Adaugă verificarea pentru tipurile de cont care nu pot fi șterse\n    if (account.accountType === \"Personal\" || account.accountType === \"Cont Curent\") {\n      setDeleteMessageType(\"error\");\n      setDeleteMessage(`Contul ${account.accountType} nu poate fi șters.`);\n      // Poți alege să nu deschizi deloc modalul de confirmare, sau să-l deschizi doar cu mesajul de eroare\n      // Pentru simplitate, îl deschidem cu mesajul de eroare și nu permitem confirmarea.\n      setAccountToDelete(null); // Nu setezi accountToDelete dacă nu se poate șterge\n      setShowDeleteConfirm(true);\n      setTimeout(() => {\n        setDeleteMessage(\"\");\n        setDeleteMessageType(\"\");\n        setShowDeleteConfirm(false);\n      }, 5000); // Mesajul dispare după 5 secunde\n      return;\n    }\n    setAccountToDelete(account);\n    setShowDeleteConfirm(true);\n    setDeleteMessage(\"\");\n    setDeleteMessageType(\"\");\n  };\n  const confirmDeleteAccount = async () => {\n    if (!accountToDelete) {\n      console.error(\"No account selected for deletion\");\n      return;\n    }\n\n    // Verifică din nou dacă nu cumva contul este \"Personal\" sau \"Cont Curent\"\n    if (accountToDelete.accountType === \"Personal\" || accountToDelete.accountType === \"Cont Curent\") {\n      setDeleteMessageType(\"error\");\n      setDeleteMessage(`Contul ${accountToDelete.accountType} nu poate fi șters.`);\n      return; // Nu continua cu ștergerea\n    }\n    if (accountToDelete.balance > 0) {\n      setDeleteMessageType(\"error\");\n      setDeleteMessage(`Nu poți șterge acest cont deoarece are un sold de ${formatNumber(accountToDelete.balance)} ${accountToDelete.currency}.\\n` + `Te rugăm să transferi banii în alt cont înainte de a șterge acest cont.`);\n      return;\n    }\n    try {\n      const response = await fetch(`https://localhost:7157/api/Accounts/${accountToDelete.accountId}`, {\n        method: \"DELETE\"\n      });\n      if (response.ok) {\n        setDeleteMessageType(\"success\");\n        setDeleteMessage(\"Contul a fost șters cu succes.\");\n        showConfirmationNotification(\"Contul a fost șters cu succes!\");\n        setShowDeleteConfirm(false);\n        setAccountToDelete(null);\n        await fetchAccounts(); // Reîmprospătează conturile după ștergere\n      } else {\n        const errorText = await response.text();\n        setDeleteMessageType(\"error\");\n        setDeleteMessage(\"Eroare la ștergerea contului: \" + errorText);\n      }\n    } catch (error) {\n      setDeleteMessageType(\"error\");\n      setDeleteMessage(\"Eroare tehnică: \" + error.message);\n    }\n  };\n\n  // Lista tipurilor de conturi pe care utilizatorul le poate adăuga manual\n  const creatableAccountTypes = [{\n    name: \"Economii\",\n    description: \"Pentru economisirea banilor și obiective financiare\"\n  }, {\n    name: \"Investitii\",\n    description: \"Pentru investiții și tranzacții pe termen lung\"\n  }, {\n    name: \"Călătorii\",\n    description: \"Pentru fondurile alocate călătoriilor\"\n  }\n  // Adaugă aici și alte tipuri de conturi pe care vrei să le permiti utilizatorului să le creeze\n  // ex: { name: \"Mașină\", description: \"Pentru fondul de mașină\" }\n  ];\n  const accountTypes = [...new Set(accounts.map(acc => acc.accountType))];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-left logo-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"TrustPay Logo\",\n          className: \"header-logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"logo-text\",\n          children: \"Trust Pay - Siguran\\u021Ba banilor t\\u0103i!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-right\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"username\",\n          children: [\"Salut, \", user.userName, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: goToProfile,\n          children: \"Vezi Profilul\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chrome-tabs-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chrome-tabs-left\",\n        children: accountTypes.map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setCurrentTab(type),\n          className: `chrome-tab ${currentTab === type ? \"chrome-tab-active\" : \"\"}`,\n          children: type\n        }, type, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"create-account-button\",\n        onClick: () => setShowCreateAccountModal(true),\n        children: \"Creeaz\\u0103 cont\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: [accounts.filter(acc => acc.accountType === currentTab).map(acc => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"account-tab\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"account-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"account-title\",\n            children: acc.accountType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"balance-label\",\n            children: \"Balan\\u021B\\u0103:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"account-balance\",\n            children: [formatNumber(acc.balance), \" \", acc.currency]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"account-actions-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"account-actions-left\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"action-button transfer-button\",\n              onClick: () => {\n                setFromAccountId(acc.accountId);\n                setShowTransferForm(true);\n                setTransferType(\"funds\");\n              },\n              children: \"Mutare fonduri\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 19\n            }, this), acc.accountType === \"Personal\" && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"action-button transfer-button\",\n              onClick: () => {\n                setFromAccountId(acc.accountId);\n                setShowTransferForm(true);\n                setTransferType(\"user\");\n              },\n              children: \"Transfer c\\u0103tre alt utilizator\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 21\n            }, this), acc.accountType !== \"Cont Curent\" && acc.accountType !== \"Personal\" && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"action-button delete-button delete-button-red\",\n              onClick: () => handleDeleteAccount(acc),\n              children: \"\\u0218terge cont\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"account-actions-right\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"action-button history-button\",\n              onClick: () => {\n                navigate(\"/istoric-tranzactii\", {\n                  state: {\n                    account: acc\n                  },\n                  replace: false\n                });\n              },\n              children: \"Istoric Tranzac\\u021Bii\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 15\n        }, this)]\n      }, acc.accountId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 13\n      }, this)), accounts.length === 0 && currentTab === null && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-accounts-message\",\n        children: \"Nu ai \\xEEnc\\u0103 niciun cont. Apas\\u0103 \\\"Creeaz\\u0103 cont\\\" pentru a ad\\u0103uga unul!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 13\n      }, this), accounts.length > 0 && currentTab !== null && !accounts.some(acc => acc.accountType === currentTab) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-accounts-message\",\n        children: \"Contul curent nu mai exist\\u0103. Te rug\\u0103m s\\u0103 selectezi un alt cont.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 7\n    }, this), showCreateAccountModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-account-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"create-account-modal-title\",\n        children: \"Creeaz\\u0103 cont nou\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 5\n      }, this), (() => {\n        const allAccountTypes = [{\n          type: \"Personal\",\n          title: \"Cont Personal\",\n          description: \"Cont principal pentru cheltuieli personale\"\n        }, {\n          type: \"Economii\",\n          title: \"Economii\",\n          description: \"Pentru economisirea banilor și obiective financiare\"\n        }, {\n          type: \"Investitii\",\n          title: \"Investiții\",\n          description: \"Pentru investiții și tranzacții pe termen lung\"\n        }, {\n          type: \"Calatorii\",\n          title: \"Călătorii\",\n          description: \"Economisește pentru vacanțe, escapade de weekend și aventuri în jurul lumii\"\n        }];\n        const createdAccountTypes = (userAccounts || []).map(acc => acc.accountType);\n        const availableToCreate = allAccountTypes.filter(acc => !createdAccountTypes.includes(acc.type));\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [availableToCreate.map(acc => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `account-type-option ${selectedAccountType === acc.type ? \"selected\" : \"\"}`,\n            onClick: () => setSelectedAccountType(acc.type),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"account-type-text\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: acc.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 571,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: acc.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 572,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 570,\n              columnNumber: 15\n            }, this)\n          }, acc.type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 13\n          }, this)), availableToCreate.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"no-more-accounts\",\n            children: \"Ai deja toate tipurile de conturi permise.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n      })(), createAccountMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message-box ${createAccountMessageType}-message`,\n        children: createAccountMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-button\",\n          onClick: () => {\n            setShowCreateAccountModal(false);\n            setSelectedAccountType(\"\");\n            setCreateAccountMessage(\"\");\n            setCreateAccountMessageType(\"\");\n          },\n          children: \"Anuleaz\\u0103\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"submit-button\",\n          onClick: createAccount,\n          disabled: !selectedAccountType,\n          children: \"Creeaz\\u0103 cont\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 3\n    }, this), showTransferForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transfer-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"transfer-modal-title\",\n        children: transferType === \"funds\" ? \"Transfer între conturi\" : \"Transfer către alt utilizator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 11\n      }, this), transferType === \"funds\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Din cont:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: fromAccountId,\n            disabled: true,\n            children: accounts.filter(acc => acc.accountId === fromAccountId).map(acc => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: acc.accountId,\n              children: [acc.accountType, \" (\", acc.balance, \" \", acc.currency, \")\"]\n            }, acc.accountId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 638,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"\\xCEn cont:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            value: toAccountId,\n            onChange: e => setToAccountId(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Selecteaz\\u0103 contul destina\\u021Bie\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 652,\n              columnNumber: 19\n            }, this), accounts.filter(acc => acc.accountId !== fromAccountId).map(acc => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: acc.accountId,\n              children: [acc.accountType, \" (\", acc.balance, \" \", acc.currency, \")\"]\n            }, acc.accountId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Sum\\u0103:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            className: \"form-control\",\n            value: transferAmount,\n            onChange: e => setTransferAmount(e.target.value),\n            min: \"0.01\",\n            step: \"0.01\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Moned\\u0103:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: \"RON\",\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cancel-button\",\n            onClick: () => setShowTransferForm(false),\n            children: \"Anulare\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"submit-button\",\n            onClick: transferFunds,\n            children: \"Transfer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"De la utilizator:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: fromUserName,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"C\\u0103tre utilizator:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 710,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: toUserName,\n            onChange: e => setToUserName(e.target.value),\n            placeholder: \"Nume utilizator destina\\u021Bie\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Sum\\u0103:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 721,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            className: \"form-control\",\n            value: amount,\n            onChange: e => setAmount(e.target.value),\n            min: \"0.01\",\n            step: \"0.01\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-label\",\n            children: \"Moned\\u0103:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: \"RON\",\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 734,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cancel-button\",\n            onClick: () => setShowTransferForm(false),\n            children: \"Anulare\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 743,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"submit-button\",\n            onClick: transferBetweenUsers,\n            children: \"Transfer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 749,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message-box ${messageType === \"success\" ? \"success-message\" : messageType === \"error\" ? \"error-message\" : \"info-message\"}`,\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 760,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 9\n    }, this), showDeleteConfirm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"delete-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"delete-modal-title\",\n        children: \"Confirmare \\u0219tergere cont\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 778,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"delete-modal-content\",\n        children: [accountToDelete ?\n        /*#__PURE__*/\n        // Afișează detaliile contului doar dacă accountToDelete este setat\n        _jsxDEV(\"p\", {\n          children: [\"Sigur dore\\u0219ti s\\u0103 \\u0219tergi contul \", accountToDelete.accountType, \" (\", accountToDelete.currency, \")?\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 782,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Acest cont nu poate fi \\u0219ters.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 787,\n          columnNumber: 17\n        }, this) // Mesaj general dacă accountToDelete e null (e.g., pentru \"Personal\")\n        , deleteMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message-box ${deleteMessageType}-message`,\n          children: deleteMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 791,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-button\",\n          onClick: () => {\n            setShowDeleteConfirm(false);\n            setDeleteMessage(\"\"); // Resetează mesajul la închidere\n            setDeleteMessageType(\"\");\n          },\n          children: \"Anuleaz\\u0103\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 798,\n          columnNumber: 13\n        }, this), accountToDelete && accountToDelete.accountType !== \"Personal\" && accountToDelete.accountType !== \"Cont Curent\" && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"delete-confirm-button\",\n          onClick: confirmDeleteAccount,\n          children: \"\\u0218terge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 810,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 797,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 777,\n      columnNumber: 9\n    }, this), showNotification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification success-notification\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"notification-icon\",\n          children: \"\\u2713\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 824,\n          columnNumber: 13\n        }, this), notificationMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 823,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 822,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 408,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"ZYz6UI0/fSv2yfD18gE/5a0wNBQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","logo","useNavigate","Profile","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","user","onLogout","_s","accounts","setAccounts","currentTab","setCurrentTab","showTransferForm","setShowTransferForm","fromAccountId","setFromAccountId","toAccountId","setToAccountId","transferAmount","setTransferAmount","transferCurrency","setTransferCurrency","message","setMessage","messageType","setMessageType","transferType","setTransferType","toUserName","setToUserName","amount","setAmount","currency","setCurrency","fromUserName","userName","showNotification","setShowNotification","notificationMessage","setNotificationMessage","showDeleteConfirm","setShowDeleteConfirm","accountToDelete","setAccountToDelete","deleteMessage","setDeleteMessage","deleteMessageType","setDeleteMessageType","showCreateAccountModal","setShowCreateAccountModal","selectedAccountType","setSelectedAccountType","createAccountMessage","setCreateAccountMessage","createAccountMessageType","setCreateAccountMessageType","userAccounts","setUserAccounts","navigate","goToProfile","fetchAccounts","response","fetch","userId","data","json","Array","isArray","length","accountType","currentTabExists","some","acc","error","console","showConfirmationNotification","setTimeout","transferFunds","parsedAmount","parseFloat","fromAccount","find","accountId","balance","method","headers","body","JSON","stringify","transactionType","ok","errorData","transferBetweenUsers","test","trim","FromUserName","ToUserName","Amount","Currency","TransactionType","createAccount","newAccount","errorMessage","title","errorText","text","status","formatNumber","number","undefined","isNaN","num","Number","isInteger","toString","toFixed","handleDeleteAccount","account","confirmDeleteAccount","creatableAccountTypes","name","description","accountTypes","Set","map","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","filter","state","replace","allAccountTypes","createdAccountTypes","availableToCreate","includes","disabled","value","onChange","e","target","min","step","readOnly","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Andrada/Documents/semestru 2/proiect repository2/TrustPay_Project/TrustPay_corect/TrustPay-front_end/src/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Dashboard.css';\nimport logo from './logo1.png';\nimport { useNavigate } from 'react-router-dom';\nimport Profile from './Profile'; // Asigură-te că Profile este corect importat și utilizat dacă este cazul\n\nfunction Dashboard({ user, onLogout }) {\n  const [accounts, setAccounts] = useState([]);\n  const [currentTab, setCurrentTab] = useState(null);\n  const [showTransferForm, setShowTransferForm] = useState(false);\n  const [fromAccountId, setFromAccountId] = useState(null);\n  const [toAccountId, setToAccountId] = useState(\"\");\n  const [transferAmount, setTransferAmount] = useState(\"\");\n  const [transferCurrency, setTransferCurrency] = useState(\"RON\");\n  const [message, setMessage] = useState(\"\");\n  const [messageType, setMessageType] = useState(\"\");\n  const [transferType, setTransferType] = useState(null);\n  const [toUserName, setToUserName] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [currency, setCurrency] = useState(\"RON\");\n  const [fromUserName] = useState(user.userName);\n  const [showNotification, setShowNotification] = useState(false);\n  const [notificationMessage, setNotificationMessage] = useState(\"\");\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n  const [accountToDelete, setAccountToDelete] = useState(null);\n  const [deleteMessage, setDeleteMessage] = useState(\"\");\n  const [deleteMessageType, setDeleteMessageType] = useState(\"\");\n  const [showCreateAccountModal, setShowCreateAccountModal] = useState(false);\n  const [selectedAccountType, setSelectedAccountType] = useState(\"\");\n  const [createAccountMessage, setCreateAccountMessage] = useState(\"\");\n  const [createAccountMessageType, setCreateAccountMessageType] = useState(\"\");\n  const [userAccounts, setUserAccounts] = useState([]);\n  const navigate = useNavigate();\n\n  const goToProfile = () => {\n    navigate('/profile');\n  };\n\n  const fetchAccounts = async () => {\n    try {\n      const response = await fetch(\n        `https://localhost:7157/api/Accounts/user/${user.userId}`\n      );\n      const data = await response.json();\n      if (Array.isArray(data) && data.length > 0) {\n        setAccounts(data);\n        // Set current tab to the first account's type if no tab is currently selected\n        if (currentTab === null) {\n          setCurrentTab(data[0].accountType);\n        } else {\n            // If the current tab (selectedAccountType after creation) is no longer valid,\n            // or if the account was deleted, switch to the first available account.\n            // This ensures a valid tab is always selected.\n            const currentTabExists = data.some(acc => acc.accountType === currentTab);\n            if (!currentTabExists && data.length > 0) {\n                setCurrentTab(data[0].accountType);\n            } else if (data.length === 0) {\n                setCurrentTab(null); // No accounts left\n            }\n        }\n      } else {\n        setAccounts([]);\n        setCurrentTab(null); // No accounts, no active tab\n      }\n    } catch (error) {\n      console.error(\"Error fetching accounts:\", error);\n      // Handle cases where user has no accounts (e.g., first login, or all deleted)\n      setAccounts([]);\n      setCurrentTab(null);\n    }\n  };\n\n  // Re-fetch accounts when user.userId changes\n  useEffect(() => {\n    if (user && user.userId) {\n        fetchAccounts();\n    }\n  }, [user.userId]);\n\n  const showConfirmationNotification = (message) => {\n    setNotificationMessage(message);\n    setShowNotification(true);\n    setTimeout(() => setShowNotification(false), 5000);\n  };\n\n  const transferFunds = async () => {\n    const parsedAmount = parseFloat(transferAmount);\n    if (!parsedAmount || parsedAmount <= 0) {\n      setMessageType(\"error\");\n      setMessage(\"Suma introdusă nu este validă.\");\n      return;\n    }\n\n    if (!toAccountId || toAccountId === \"\") {\n      setMessageType(\"error\");\n      setMessage(\"Te rugăm să selectezi un cont destinație.\");\n      return;\n    }\n\n    if (fromAccountId === toAccountId) {\n      setMessageType(\"error\");\n      setMessage(\"Nu poți transfera către același cont.\");\n      return;\n    }\n\n    const fromAccount = accounts.find(acc => acc.accountId === fromAccountId);\n    if (fromAccount && parsedAmount > fromAccount.balance) {\n      setMessageType(\"error\");\n      setMessage(\"Fonduri insuficiente pentru această tranzacție.\");\n      setTimeout(() => {\n        setMessage(\"\");\n        setMessageType(\"\");\n      }, 5000);\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        \"https://localhost:7157/api/Transactions/transfer\",\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            fromAccountId,\n            toAccountId,\n            amount: parsedAmount,\n            currency: \"RON\",\n            transactionType: \"Transfer\",\n            fromUserName,\n            toUserName,\n          }),\n        }\n      );\n\n      if (response.ok) {\n        setMessageType(\"success\");\n        setMessage(\"Transfer realizat cu succes!\");\n        showConfirmationNotification(\"Transfer realizat cu succes!\");\n        await fetchAccounts(); // Reîmprospătează conturile\n        setShowTransferForm(false);\n        setTransferAmount(\"\");\n        setTransferCurrency(\"RON\");\n        setToAccountId(\"\"); // Reset toAccountId\n      } else {\n        const errorData = await response.json();\n        setMessageType(\"error\");\n        setMessage(\n          \"Eroare la transfer: \" + (errorData.message || \"necunoscută\")\n        );\n      }\n    } catch (error) {\n      setMessageType(\"error\");\n      setMessage(\"Eroare: \" + error.message);\n    }\n\n    setTimeout(() => {\n      setMessage(\"\");\n      setMessageType(\"\");\n    }, 5000);\n  };\n\n  const transferBetweenUsers = async () => {\n    const parsedAmount = parseFloat(amount);\n\n    if (!parsedAmount || parsedAmount <= 0) {\n      setMessageType(\"error\");\n      setMessage(\"Suma introdusă nu este validă.\");\n      return;\n    }\n\n    if (!/^\\d+(\\.\\d{1,2})?$/.test(amount)) {\n      setMessageType(\"error\");\n      setMessage(\"Suma trebuie să aibă maximum 2 zecimale.\");\n      return;\n    }\n\n    if (!toUserName || toUserName.trim() === \"\") {\n      setMessageType(\"error\");\n      setMessage(\"Te rugăm să introduci numele utilizatorului destinație.\");\n      return;\n    }\n\n    if (fromUserName === toUserName) {\n      setMessageType(\"error\");\n      setMessage(\"Nu poți transfera către același utilizator.\");\n      return;\n    }\n\n    const fromAccount = accounts.find(acc => acc.accountId === fromAccountId);\n    if (fromAccount && parsedAmount > fromAccount.balance) {\n      setMessageType(\"error\");\n      setMessage(\"Fonduri insuficiente pentru această tranzacție.\");\n      setTimeout(() => {\n        setMessage(\"\");\n        setMessageType(\"\");\n      }, 5000);\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        \"https://localhost:7157/api/Transactions/transfer-between-users\",\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            FromUserName: fromUserName,\n            ToUserName: toUserName,\n            Amount: parsedAmount,\n            Currency: \"RON\",\n            TransactionType: \"Transfer\",\n          }),\n        }\n      );\n\n      if (response.ok) {\n        setMessageType(\"success\");\n        setMessage(\"Transfer realizat cu succes!\");\n        showConfirmationNotification(\"Transfer către utilizator realizat cu succes!\");\n        await fetchAccounts(); // Reîmprospătează conturile\n        setShowTransferForm(false);\n        setAmount(\"\");\n        setCurrency(\"RON\");\n        setToUserName(\"\");\n      } else {\n        const errorData = await response.json();\n        setMessageType(\"error\");\n        setMessage(\"Eroare la transfer: \" + (errorData.message || \"necunoscută\"));\n      }\n    } catch (error) {\n      setMessageType(\"error\");\n      setMessage(\"Eroare: \" + error.message);\n    }\n\n    setTimeout(() => {\n      setMessage(\"\");\n      setMessageType(\"\");\n    }, 5000);\n  };\n\n  // Functia de creare a contului - actualizată\n  const createAccount = async () => {\n    if (!selectedAccountType) {\n      setCreateAccountMessageType(\"error\");\n      setCreateAccountMessage(\"Te rugăm să selectezi tipul de cont.\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\"https://localhost:7157/api/Accounts\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          userId: user.userId,\n          accountType: selectedAccountType,\n          balance: 0,\n          currency: \"RON\",\n        }),\n      });\n\n      if (response.ok) {\n        const newAccount = await response.json();\n        setCreateAccountMessageType(\"success\");\n        setCreateAccountMessage(`Contul ${selectedAccountType} a fost creat cu succes!`);\n        showConfirmationNotification(`Contul ${selectedAccountType} a fost creat cu succes!`);\n\n        await fetchAccounts(); // Reîmprospătăm conturile imediat\n\n        // Setăm tab-ul activ pe noul cont creat\n        setCurrentTab(selectedAccountType);\n\n        // Închidem modalul după un delay scurt pentru a vedea mesajul de succes\n        setTimeout(() => {\n          setShowCreateAccountModal(false);\n          setSelectedAccountType(\"\");\n          setCreateAccountMessage(\"\");\n          setCreateAccountMessageType(\"\");\n        }, 1500);\n\n      } else {\n        let errorMessage = \"Eroare necunoscută\";\n\n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.message || errorData.title || JSON.stringify(errorData); // Am adăugat JSON.stringify pentru obiecte\n        } catch {\n          try {\n            const errorText = await response.text();\n            errorMessage = errorText || `Eroare HTTP ${response.status}`;\n          } catch {\n            errorMessage = `Eroare HTTP ${response.status}`;\n          }\n        }\n\n        setCreateAccountMessageType(\"error\");\n        setCreateAccountMessage(errorMessage);\n\n        setTimeout(() => {\n          setCreateAccountMessage(\"\");\n          setCreateAccountMessageType(\"\");\n        }, 6000);\n      }\n    } catch (error) {\n      setCreateAccountMessageType(\"error\");\n      setCreateAccountMessage(\"Eroare de conectare: \" + error.message);\n\n      setTimeout(() => {\n        setCreateAccountMessage(\"\");\n        setCreateAccountMessageType(\"\");\n      }, 6000);\n    }\n  };\n\n\n  const formatNumber = (number) => {\n    if (number === undefined || number === null || isNaN(number)) {\n      return \"0\";\n    }\n    const num = typeof number === \"string\" ? parseFloat(number) : number;\n    return Number.isInteger(num) ? num.toString() : num.toFixed(2);\n  };\n\n  const handleDeleteAccount = (account) => {\n    // Adaugă verificarea pentru tipurile de cont care nu pot fi șterse\n    if (account.accountType === \"Personal\" || account.accountType === \"Cont Curent\") {\n        setDeleteMessageType(\"error\");\n        setDeleteMessage(`Contul ${account.accountType} nu poate fi șters.`);\n        // Poți alege să nu deschizi deloc modalul de confirmare, sau să-l deschizi doar cu mesajul de eroare\n        // Pentru simplitate, îl deschidem cu mesajul de eroare și nu permitem confirmarea.\n        setAccountToDelete(null); // Nu setezi accountToDelete dacă nu se poate șterge\n        setShowDeleteConfirm(true);\n        setTimeout(() => {\n          setDeleteMessage(\"\");\n          setDeleteMessageType(\"\");\n          setShowDeleteConfirm(false);\n        }, 5000); // Mesajul dispare după 5 secunde\n        return;\n    }\n\n    setAccountToDelete(account);\n    setShowDeleteConfirm(true);\n    setDeleteMessage(\"\");\n    setDeleteMessageType(\"\");\n  };\n\n  const confirmDeleteAccount = async () => {\n    if (!accountToDelete) {\n      console.error(\"No account selected for deletion\");\n      return;\n    }\n\n    // Verifică din nou dacă nu cumva contul este \"Personal\" sau \"Cont Curent\"\n    if (accountToDelete.accountType === \"Personal\" || accountToDelete.accountType === \"Cont Curent\") {\n      setDeleteMessageType(\"error\");\n      setDeleteMessage(`Contul ${accountToDelete.accountType} nu poate fi șters.`);\n      return; // Nu continua cu ștergerea\n    }\n\n    if (accountToDelete.balance > 0) {\n      setDeleteMessageType(\"error\");\n      setDeleteMessage(\n        `Nu poți șterge acest cont deoarece are un sold de ${formatNumber(accountToDelete.balance)} ${accountToDelete.currency}.\\n` +\n          `Te rugăm să transferi banii în alt cont înainte de a șterge acest cont.`\n      );\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        `https://localhost:7157/api/Accounts/${accountToDelete.accountId}`,\n        {\n          method: \"DELETE\",\n        }\n      );\n\n      if (response.ok) {\n        setDeleteMessageType(\"success\");\n        setDeleteMessage(\"Contul a fost șters cu succes.\");\n        showConfirmationNotification(\"Contul a fost șters cu succes!\");\n\n        setShowDeleteConfirm(false);\n        setAccountToDelete(null);\n        await fetchAccounts(); // Reîmprospătează conturile după ștergere\n\n      } else {\n        const errorText = await response.text();\n        setDeleteMessageType(\"error\");\n        setDeleteMessage(\"Eroare la ștergerea contului: \" + errorText);\n      }\n    } catch (error) {\n      setDeleteMessageType(\"error\");\n      setDeleteMessage(\"Eroare tehnică: \" + error.message);\n    }\n  };\n\n  // Lista tipurilor de conturi pe care utilizatorul le poate adăuga manual\n  const creatableAccountTypes = [\n    { name: \"Economii\", description: \"Pentru economisirea banilor și obiective financiare\" },\n    { name: \"Investitii\", description: \"Pentru investiții și tranzacții pe termen lung\" },\n    { name: \"Călătorii\", description: \"Pentru fondurile alocate călătoriilor\" },\n    // Adaugă aici și alte tipuri de conturi pe care vrei să le permiti utilizatorului să le creeze\n    // ex: { name: \"Mașină\", description: \"Pentru fondul de mașină\" }\n  ];\n\n  const accountTypes = [...new Set(accounts.map((acc) => acc.accountType))];\n\n  return (\n    <div className=\"app-container\">\n      <header className=\"header\">\n        <div className=\"header-left logo-container\">\n          <img src={logo} alt=\"TrustPay Logo\" className=\"header-logo\" />\n          <span className=\"logo-text\">Trust Pay - Siguranța banilor tăi!</span>\n        </div>\n        <div className=\"header-right\">\n          <span className=\"username\">Salut, {user.userName}!</span>\n          <button onClick={goToProfile}>Vezi Profilul</button>\n          <button onClick={onLogout}>Logout</button>\n        </div>\n      </header>\n\n      {/* Elimină complet create-account-section */}\n\n      <div className=\"chrome-tabs-container\">\n        <div className=\"chrome-tabs-left\">\n          {accountTypes.map((type) => (\n            <button\n              key={type}\n              onClick={() => setCurrentTab(type)}\n              className={`chrome-tab ${\n                currentTab === type ? \"chrome-tab-active\" : \"\"\n              }`}\n            >\n              {type}\n            </button>\n          ))}\n        </div>\n\n        {/* Butonul Creează cont în dreapta */}\n        <button\n          className=\"create-account-button\"\n          onClick={() => setShowCreateAccountModal(true)}\n        >\n          Creează cont\n        </button>\n      </div>\n\n      <div className=\"tab-content\">\n        {accounts\n          .filter((acc) => acc.accountType === currentTab)\n          .map((acc) => (\n            <div key={acc.accountId} className=\"account-tab\">\n              <div className=\"account-info\">\n                <h3 className=\"account-title\">{acc.accountType}</h3>\n                <div className=\"balance-label\">Balanță:</div>\n                <p className=\"account-balance\">\n                  {formatNumber(acc.balance)} {acc.currency}\n                </p>\n              </div>\n\n              <div className=\"account-actions-container\">\n                <div className=\"account-actions-left\">\n                  <button\n                    className=\"action-button transfer-button\"\n                    onClick={() => {\n                      setFromAccountId(acc.accountId);\n                      setShowTransferForm(true);\n                      setTransferType(\"funds\");\n                    }}\n                  >\n                    Mutare fonduri\n                  </button>\n\n                  {/* Transfer către alt utilizator - doar pentru contul Personal */}\n                  {acc.accountType === \"Personal\" && (\n                    <button\n                      className=\"action-button transfer-button\"\n                      onClick={() => {\n                        setFromAccountId(acc.accountId);\n                        setShowTransferForm(true);\n                        setTransferType(\"user\");\n                      }}\n                    >\n                      Transfer către alt utilizator\n                    </button>\n                  )}\n\n                  {/* Butonul Șterge cont - NU este afișat pentru \"Personal\" sau \"Cont Curent\" */}\n                  {acc.accountType !== \"Cont Curent\" && acc.accountType !== \"Personal\" && (\n                    <button\n                      className=\"action-button delete-button delete-button-red\"\n                      onClick={() => handleDeleteAccount(acc)}\n                    >\n                      Șterge cont\n                    </button>\n                  )}\n                </div>\n\n                <div className=\"account-actions-right\">\n                  <button\n                    className=\"action-button history-button\"\n                    onClick={() => {\n                      navigate(\"/istoric-tranzactii\", {\n                        state: { account: acc },\n                        replace: false,\n                      });\n                    }}\n                  >\n                    Istoric Tranzacții\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))}\n\n          {/* Mesaj dacă nu există conturi pentru tab-ul selectat sau deloc */}\n          {accounts.length === 0 && currentTab === null && (\n            <div className=\"no-accounts-message\">\n                Nu ai încă niciun cont. Apasă \"Creează cont\" pentru a adăuga unul!\n            </div>\n          )}\n          {accounts.length > 0 && currentTab !== null && !accounts.some(acc => acc.accountType === currentTab) && (\n            <div className=\"no-accounts-message\">\n                Contul curent nu mai există. Te rugăm să selectezi un alt cont.\n            </div>\n          )}\n      </div>\n\n{showCreateAccountModal && (\n  <div className=\"create-account-modal\">\n    <h3 className=\"create-account-modal-title\">Creează cont nou</h3>\n\n    {(() => {\n      const allAccountTypes = [\n        {\n          type: \"Personal\",\n          title: \"Cont Personal\",\n          description: \"Cont principal pentru cheltuieli personale\",\n        },\n        {\n          type: \"Economii\",\n          title: \"Economii\",\n          description: \"Pentru economisirea banilor și obiective financiare\",\n        },\n        {\n          type: \"Investitii\",\n          title: \"Investiții\",\n          description: \"Pentru investiții și tranzacții pe termen lung\",\n        },\n        {\n          type: \"Calatorii\",\n          title: \"Călătorii\",\n          description: \"Economisește pentru vacanțe, escapade de weekend și aventuri în jurul lumii\"\n        },\n      ];\n\n      const createdAccountTypes = (userAccounts || []).map(acc => acc.accountType);\n\n      const availableToCreate = allAccountTypes.filter(\n        acc => !createdAccountTypes.includes(acc.type)\n      );\n\n      return (\n        <>\n          {availableToCreate.map(acc => (\n            <button\n              key={acc.type}\n              className={`account-type-option ${selectedAccountType === acc.type ? \"selected\" : \"\"}`}\n              onClick={() => setSelectedAccountType(acc.type)}\n            >\n              <div className=\"account-type-text\">\n                <strong>{acc.title}</strong>\n                <p>{acc.description}</p>\n              </div>\n            </button>\n          ))}\n\n          {availableToCreate.length === 0 && (\n            <p className=\"no-more-accounts\">\n              Ai deja toate tipurile de conturi permise.\n            </p>\n          )}\n        </>\n      );\n    })()}\n\n    {createAccountMessage && (\n      <div className={`message-box ${createAccountMessageType}-message`}>\n        {createAccountMessage}\n      </div>\n    )}\n\n    <div className=\"modal-actions\">\n      <button\n        className=\"cancel-button\"\n        onClick={() => {\n          setShowCreateAccountModal(false);\n          setSelectedAccountType(\"\");\n          setCreateAccountMessage(\"\");\n          setCreateAccountMessageType(\"\");\n        }}\n      >\n        Anulează\n      </button>\n      <button\n        className=\"submit-button\"\n        onClick={createAccount}\n        disabled={!selectedAccountType}\n      >\n        Creează cont\n      </button>\n    </div>\n  </div>\n)}\n\n\n\n      {/* Transfer Forms (remains unchanged) */}\n      {showTransferForm && (\n        <div className=\"transfer-modal\">\n          <h3 className=\"transfer-modal-title\">\n            {transferType === \"funds\"\n              ? \"Transfer între conturi\"\n              : \"Transfer către alt utilizator\"}\n          </h3>\n\n          {transferType === \"funds\" ? (\n            <>\n              <div className=\"form-group\">\n                <label className=\"form-label\">Din cont:</label>\n                <select\n                  className=\"form-control\"\n                  value={fromAccountId}\n                  disabled={true}\n                >\n                  {accounts\n                    .filter((acc) => acc.accountId === fromAccountId)\n                    .map((acc) => (\n                      <option key={acc.accountId} value={acc.accountId}>\n                        {acc.accountType} ({acc.balance} {acc.currency})\n                      </option>\n                    ))}\n                </select>\n              </div>\n\n              <div className=\"form-group\">\n                <label className=\"form-label\">În cont:</label>\n                <select\n                  className=\"form-control\"\n                  value={toAccountId}\n                  onChange={(e) => setToAccountId(e.target.value)}\n                >\n                  <option value=\"\" disabled>Selectează contul destinație</option>\n                  {accounts\n                    .filter((acc) => acc.accountId !== fromAccountId)\n                    .map((acc) => (\n                      <option key={acc.accountId} value={acc.accountId}>\n                        {acc.accountType} ({acc.balance} {acc.currency})\n                      </option>\n                    ))}\n                </select>\n              </div>\n\n              <div className=\"form-group\">\n                <label className=\"form-label\">Sumă:</label>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  value={transferAmount}\n                  onChange={(e) => setTransferAmount(e.target.value)}\n                  min=\"0.01\"\n                  step=\"0.01\"\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <label className=\"form-label\">Monedă:</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  value=\"RON\"\n                  readOnly\n                />\n              </div>\n\n              <div className=\"modal-actions\">\n                <button\n                  className=\"cancel-button\"\n                  onClick={() => setShowTransferForm(false)}\n                >\n                  Anulare\n                </button>\n                <button className=\"submit-button\" onClick={transferFunds}>\n                  Transfer\n                </button>\n              </div>\n            </>\n          ) : (\n            <>\n              <div className=\"form-group\">\n                <label className=\"form-label\">De la utilizator:</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={fromUserName}\n                  disabled={true}\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <label className=\"form-label\">Către utilizator:</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  value={toUserName}\n                  onChange={(e) => setToUserName(e.target.value)}\n                  placeholder=\"Nume utilizator destinație\"\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <label className=\"form-label\">Sumă:</label>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  value={amount}\n                  onChange={(e) => setAmount(e.target.value)}\n                  min=\"0.01\"\n                  step=\"0.01\"\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <label className=\"form-label\">Monedă:</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  value=\"RON\"\n                  readOnly\n                />\n              </div>\n\n              <div className=\"modal-actions\">\n                <button\n                  className=\"cancel-button\"\n                  onClick={() => setShowTransferForm(false)}\n                >\n                  Anulare\n                </button>\n                <button\n                  className=\"submit-button\"\n                  onClick={transferBetweenUsers}\n                >\n                  Transfer\n                </button>\n              </div>\n            </>\n          )}\n\n          {message && (\n            <div\n              className={`message-box ${\n                messageType === \"success\"\n                  ? \"success-message\"\n                  : messageType === \"error\"\n                  ? \"error-message\"\n                  : \"info-message\"\n              }`}\n            >\n              {message}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Modal de confirmare pentru ștergerea contului */}\n      {showDeleteConfirm && (\n        <div className=\"delete-modal\">\n          <h3 className=\"delete-modal-title\">Confirmare ștergere cont</h3>\n\n          <div className=\"delete-modal-content\">\n            {accountToDelete ? ( // Afișează detaliile contului doar dacă accountToDelete este setat\n                <p>\n                    Sigur dorești să ștergi contul {accountToDelete.accountType} (\n                    {accountToDelete.currency})?\n                </p>\n            ) : (\n                <p>Acest cont nu poate fi șters.</p> // Mesaj general dacă accountToDelete e null (e.g., pentru \"Personal\")\n            )}\n\n            {deleteMessage && (\n              <div className={`message-box ${deleteMessageType}-message`}>\n                {deleteMessage}\n              </div>\n            )}\n          </div>\n\n          <div className=\"modal-actions\">\n            <button\n              className=\"cancel-button\"\n              onClick={() => {\n                setShowDeleteConfirm(false);\n                setDeleteMessage(\"\"); // Resetează mesajul la închidere\n                setDeleteMessageType(\"\");\n              }}\n            >\n              Anulează\n            </button>\n            {/* Butonul de ștergere este afișat doar dacă accountToDelete este setat și nu este un cont non-ștergibil */}\n            {accountToDelete && accountToDelete.accountType !== \"Personal\" && accountToDelete.accountType !== \"Cont Curent\" && (\n                <button\n                    className=\"delete-confirm-button\"\n                    onClick={confirmDeleteAccount}\n                >\n                    Șterge\n                </button>\n            )}\n          </div>\n        </div>\n      )}\n\n      {showNotification && (\n        <div className=\"notification success-notification\">\n          <div className=\"notification-content\">\n            <span className=\"notification-icon\">✓</span>\n            {notificationMessage}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}