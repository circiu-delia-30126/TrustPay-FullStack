{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrada\\\\Documents\\\\semestru 2\\\\proiect frontend\\\\TrustPay-front_end\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard({\n  user\n}) {\n  _s();\n  const [accounts, setAccounts] = useState([]);\n  const [selectedTab, setSelectedTab] = useState('');\n\n  // Încarcă conturile utilizatorului atunci când se loghează\n  useEffect(() => {\n    if (user && user.accounts) {\n      setAccounts(user.accounts); // Setăm conturile utilizatorului\n      setSelectedTab(user.accounts[0].type); // Setăm primul tab ca fiind contul curent\n    }\n  }, [user]);\n\n  // Funcție pentru a adăuga un nou cont bancar\n  const addBankAccount = async () => {\n    const newType = prompt('Introduceți tipul noului cont bancar (ex: Economii, Investiții):');\n    if (!newType) return;\n    const alreadyExists = accounts.some(acc => acc.type.toLowerCase() === newType.toLowerCase());\n    if (alreadyExists) {\n      alert('Ai deja un cont de acest tip!');\n      return;\n    }\n\n    // Trimitere cerere către server pentru a crea un nou cont\n    try {\n      const response = await fetch('https://localhost:7157/api/Users/addAccount', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: user.id,\n          type: newType,\n          balance: 0\n        }) // Trimiți datele necesare pentru crearea unui cont\n      });\n      if (!response.ok) {\n        throw new Error('Eroare la crearea contului!');\n      }\n      const newAccount = await response.json(); // Poți obține contul nou creat de la server\n      setAccounts([...accounts, newAccount]); // Adăugăm contul nou în lista locală de conturi\n      setSelectedTab(newAccount.type); // Selectăm contul nou\n    } catch (error) {\n      alert('A apărut o problemă la crearea contului: ' + error.message);\n    }\n  };\n\n  // Funcție pentru a adăuga fonduri într-un cont\n  const addFunds = () => {\n    const amount = parseFloat(prompt('Introduceți suma de adăugat:'));\n    if (isNaN(amount) || amount <= 0) return;\n    setAccounts(prev => prev.map(acc => acc.type === selectedTab ? {\n      ...acc,\n      balance: acc.balance + amount,\n      transactions: [...acc.transactions, {\n        type: 'Depunere',\n        amount\n      }]\n    } : acc));\n  };\n\n  // Funcție pentru a vizualiza tranzacțiile\n  const viewTransactions = () => {\n    const account = accounts.find(acc => acc.type === selectedTab);\n    if (!account) return;\n    alert(`Istoric pentru ${account.type}: ` + (account.transactions.length ? account.transactions.map(t => `${t.type} - ${t.amount} RON`).join(', ') : 'Fără tranzacții.'));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"TrustPay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-right\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"username\",\n          children: [\"Conectat ca: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: user.userName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 51\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addBankAccount,\n          children: \"Creare cont bancar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => alert('Logout action'),\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabs\",\n      children: accounts.map((acc, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedTab(acc.type),\n        className: selectedTab === acc.type ? 'active' : '',\n        children: acc.type\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: accounts.filter(acc => acc.type === selectedTab).map((acc, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: acc.type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Balanta: \", acc.balance, \" RON\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addFunds,\n          children: \"Adaug\\u0103 Bani\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: viewTransactions,\n          children: \"Istoric Tranzac\\u021Bii\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"l4QhZ1RgO2VBqD/X8WTW3tlavUM=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Dashboard","user","_s","accounts","setAccounts","selectedTab","setSelectedTab","type","addBankAccount","newType","prompt","alreadyExists","some","acc","toLowerCase","alert","response","fetch","method","headers","body","JSON","stringify","userId","id","balance","ok","Error","newAccount","json","error","message","addFunds","amount","parseFloat","isNaN","prev","map","transactions","viewTransactions","account","find","length","t","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","userName","onClick","index","filter","_c","$RefreshReg$"],"sources":["C:/Users/Andrada/Documents/semestru 2/proiect frontend/TrustPay-front_end/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\nfunction Dashboard({ user }) {\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [selectedTab, setSelectedTab] = useState('');\r\n\r\n  // Încarcă conturile utilizatorului atunci când se loghează\r\n  useEffect(() => {\r\n    if (user && user.accounts) {\r\n      setAccounts(user.accounts); // Setăm conturile utilizatorului\r\n      setSelectedTab(user.accounts[0].type); // Setăm primul tab ca fiind contul curent\r\n    }\r\n  }, [user]);\r\n\r\n  // Funcție pentru a adăuga un nou cont bancar\r\n  const addBankAccount = async () => {\r\n    const newType = prompt('Introduceți tipul noului cont bancar (ex: Economii, Investiții):');\r\n    if (!newType) return;\r\n\r\n    const alreadyExists = accounts.some(acc => acc.type.toLowerCase() === newType.toLowerCase());\r\n    if (alreadyExists) {\r\n      alert('Ai deja un cont de acest tip!');\r\n      return;\r\n    }\r\n\r\n    // Trimitere cerere către server pentru a crea un nou cont\r\n    try {\r\n      const response = await fetch('https://localhost:7157/api/Users/addAccount', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ userId: user.id, type: newType, balance: 0 }), // Trimiți datele necesare pentru crearea unui cont\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Eroare la crearea contului!');\r\n      }\r\n\r\n      const newAccount = await response.json(); // Poți obține contul nou creat de la server\r\n      setAccounts([...accounts, newAccount]); // Adăugăm contul nou în lista locală de conturi\r\n      setSelectedTab(newAccount.type); // Selectăm contul nou\r\n    } catch (error) {\r\n      alert('A apărut o problemă la crearea contului: ' + error.message);\r\n    }\r\n  };\r\n\r\n  // Funcție pentru a adăuga fonduri într-un cont\r\n  const addFunds = () => {\r\n    const amount = parseFloat(prompt('Introduceți suma de adăugat:'));\r\n    if (isNaN(amount) || amount <= 0) return;\r\n\r\n    setAccounts(prev =>\r\n      prev.map(acc =>\r\n        acc.type === selectedTab\r\n          ? {\r\n              ...acc,\r\n              balance: acc.balance + amount,\r\n              transactions: [...acc.transactions, { type: 'Depunere', amount }],\r\n            }\r\n          : acc\r\n      )\r\n    );\r\n  };\r\n\r\n  // Funcție pentru a vizualiza tranzacțiile\r\n  const viewTransactions = () => {\r\n    const account = accounts.find(acc => acc.type === selectedTab);\r\n    if (!account) return;\r\n    alert(\r\n      `Istoric pentru ${account.type}: ` +\r\n        (account.transactions.length\r\n          ? account.transactions.map(t => `${t.type} - ${t.amount} RON`).join(', ')\r\n          : 'Fără tranzacții.')\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <header className=\"header\">\r\n        <h1>TrustPay</h1>\r\n        <div className=\"header-right\">\r\n          <span className=\"username\">Conectat ca: <strong>{user.userName}</strong></span>\r\n          <button onClick={addBankAccount}>Creare cont bancar</button>\r\n          <button onClick={() => alert('Logout action')}>Logout</button>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"tabs\">\r\n        {accounts.map((acc, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => setSelectedTab(acc.type)}\r\n            className={selectedTab === acc.type ? 'active' : ''}\r\n          >\r\n            {acc.type}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"tab-content\">\r\n        {accounts\r\n          .filter(acc => acc.type === selectedTab)\r\n          .map((acc, index) => (\r\n            <div key={index}>\r\n              <h3>{acc.type}</h3>\r\n              <p>Balanta: {acc.balance} RON</p>\r\n              <button onClick={addFunds}>Adaugă Bani</button>\r\n              <button onClick={viewTransactions}>Istoric Tranzacții</button>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}