{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrada\\\\Documents\\\\semestru 2\\\\proiect frontend\\\\TrustPay-front_end\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard({\n  user,\n  onLogout\n}) {\n  _s();\n  const [accounts, setAccounts] = useState([]);\n  const [transactions, setTransactions] = useState({});\n  const [currentTab, setCurrentTab] = useState(null);\n  useEffect(() => {\n    async function fetchAccounts() {\n      try {\n        // Modificăm endpoint-ul aici pentru a folosi corect API-ul\n        const response = await fetch(`https://localhost:7157/api/Accounts/user/${user.userId}`);\n        const data = await response.json();\n\n        // Verificăm dacă conturile sunt returnate corect\n        if (Array.isArray(data) && data.length > 0) {\n          setAccounts(data);\n          setCurrentTab(data[0].accountType); // Setează implicit primul cont\n        } else {\n          setAccounts([]); // Dacă nu sunt conturi, setăm o listă goală\n        }\n      } catch (error) {\n        console.error('Error fetching accounts:', error);\n      }\n    }\n    fetchAccounts();\n  }, [user.userId]);\n  const addFunds = async accountId => {\n    const amount = parseFloat(prompt('Introduceți suma de adăugat:'));\n    if (!amount || amount <= 0) return;\n    try {\n      // Trimite cererea de adăugare fonduri către backend\n      const response = await fetch('https://localhost:7157/api/Transactions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          accountId: accountId,\n          amount: amount,\n          type: 'Depunere',\n          date: new Date().toISOString()\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add funds');\n      }\n\n      // Actualizează contul în UI după ce tranzacția a fost adăugată\n      setAccounts(prev => prev.map(acc => acc.accountId === accountId ? {\n        ...acc,\n        balance: acc.balance + amount\n      } : acc));\n\n      // Adaugă tranzacția în state-ul local pentru a o putea vizualiza\n      setTransactions(prev => ({\n        ...prev,\n        [accountId]: [...(prev[accountId] || []), {\n          type: 'Depunere',\n          amount,\n          currency: 'RON',\n          date: new Date().toISOString()\n        }]\n      }));\n      alert('Fonduri adăugate cu succes!');\n    } catch (error) {\n      console.error('Error adding funds:', error);\n      alert('Eroare la adăugarea fondurilor');\n    }\n  };\n  const viewTransactions = accountId => {\n    const trans = transactions[accountId] || [];\n    if (trans.length === 0) {\n      alert('Nicio tranzacție înregistrată.');\n      return;\n    }\n    alert(\"Istoricul tranzacțiilor:\\n\" + trans.map(t => `${t.type} - ${t.amount} ${t.currency}`).join('\\n'));\n  };\n  const accountTypes = [...new Set(accounts.map(acc => acc.accountType))];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"TrustPay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-right\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"username\",\n          children: [\"Salut, \", user.userName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabs\",\n      children: accountTypes.map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentTab(type),\n        className: currentTab === type ? 'active' : '',\n        children: type\n      }, type, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: accounts.filter(acc => acc.accountType === currentTab).map(acc => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"account-tab\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: acc.accountType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Balan\\u021B\\u0103: \", acc.balance, \" \", acc.currency]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addFunds(acc.accountId),\n          children: \"Adaug\\u0103 Bani\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => viewTransactions(acc.accountId),\n          children: \"Istoric Tranzac\\u021Bii\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this)]\n      }, acc.accountId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"l4zNRDBpjwmYENXwERHiLNCTpKk=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Dashboard","user","onLogout","_s","accounts","setAccounts","transactions","setTransactions","currentTab","setCurrentTab","fetchAccounts","response","fetch","userId","data","json","Array","isArray","length","accountType","error","console","addFunds","accountId","amount","parseFloat","prompt","method","headers","body","JSON","stringify","type","date","Date","toISOString","ok","Error","prev","map","acc","balance","currency","alert","viewTransactions","trans","t","join","accountTypes","Set","className","children","fileName","_jsxFileName","lineNumber","columnNumber","userName","onClick","filter","_c","$RefreshReg$"],"sources":["C:/Users/Andrada/Documents/semestru 2/proiect frontend/TrustPay-front_end/src/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction Dashboard({ user, onLogout }) {\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [transactions, setTransactions] = useState({});\r\n  const [currentTab, setCurrentTab] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchAccounts() {\r\n      try {\r\n        // Modificăm endpoint-ul aici pentru a folosi corect API-ul\r\n        const response = await fetch(`https://localhost:7157/api/Accounts/user/${user.userId}`);\r\n        const data = await response.json();\r\n        \r\n        // Verificăm dacă conturile sunt returnate corect\r\n        if (Array.isArray(data) && data.length > 0) {\r\n          setAccounts(data);\r\n          setCurrentTab(data[0].accountType); // Setează implicit primul cont\r\n        } else {\r\n          setAccounts([]); // Dacă nu sunt conturi, setăm o listă goală\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching accounts:', error);\r\n      }\r\n    }\r\n\r\n    fetchAccounts();\r\n  }, [user.userId]);\r\n\r\n  const addFunds = async (accountId) => {\r\n    const amount = parseFloat(prompt('Introduceți suma de adăugat:'));\r\n    if (!amount || amount <= 0) return;\r\n\r\n    try {\r\n      // Trimite cererea de adăugare fonduri către backend\r\n      const response = await fetch('https://localhost:7157/api/Transactions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          accountId: accountId,\r\n          amount: amount,\r\n          type: 'Depunere',\r\n          date: new Date().toISOString(),\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to add funds');\r\n      }\r\n\r\n      // Actualizează contul în UI după ce tranzacția a fost adăugată\r\n      setAccounts((prev) =>\r\n        prev.map((acc) =>\r\n          acc.accountId === accountId\r\n            ? { ...acc, balance: acc.balance + amount }\r\n            : acc\r\n        )\r\n      );\r\n\r\n      // Adaugă tranzacția în state-ul local pentru a o putea vizualiza\r\n      setTransactions((prev) => ({\r\n        ...prev,\r\n        [accountId]: [\r\n          ...(prev[accountId] || []),\r\n          { type: 'Depunere', amount, currency: 'RON', date: new Date().toISOString() },\r\n        ],\r\n      }));\r\n\r\n      alert('Fonduri adăugate cu succes!');\r\n    } catch (error) {\r\n      console.error('Error adding funds:', error);\r\n      alert('Eroare la adăugarea fondurilor');\r\n    }\r\n  };\r\n\r\n  const viewTransactions = (accountId) => {\r\n    const trans = transactions[accountId] || [];\r\n    if (trans.length === 0) {\r\n      alert('Nicio tranzacție înregistrată.');\r\n      return;\r\n    }\r\n    alert(\r\n      \"Istoricul tranzacțiilor:\\n\" +\r\n        trans.map((t) => `${t.type} - ${t.amount} ${t.currency}`).join('\\n')\r\n    );\r\n  };\r\n\r\n  const accountTypes = [...new Set(accounts.map((acc) => acc.accountType))];\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <header className=\"header\">\r\n        <h1>TrustPay</h1>\r\n        <div className=\"header-right\">\r\n          <span className=\"username\">Salut, {user.userName}</span>\r\n          <button onClick={onLogout}>Logout</button>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"tabs\">\r\n        {accountTypes.map((type) => (\r\n          <button\r\n            key={type}\r\n            onClick={() => setCurrentTab(type)}\r\n            className={currentTab === type ? 'active' : ''}\r\n          >\r\n            {type}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"tab-content\">\r\n        {accounts\r\n          .filter((acc) => acc.accountType === currentTab)\r\n          .map((acc) => (\r\n            <div key={acc.accountId} className=\"account-tab\">\r\n              <h3>{acc.accountType}</h3>\r\n              <p>Balanță: {acc.balance} {acc.currency}</p>\r\n              <button onClick={() => addFunds(acc.accountId)}>Adaugă Bani</button>\r\n              <button onClick={() => viewTransactions(acc.accountId)}>Istoric Tranzacții</button>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}