{"ast":null,"code":"var _jsxFileName = \"D:\\\\II\\\\Proiect\\\\proiect repository2\\\\TrustPay_Project\\\\TrustPay_corect\\\\TrustPay-front_end\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Navigate } from \"react-router-dom\";\nimport Dashboard from \"./Dashboard\";\nimport TransactionHistoryPage from \"./TransactionHistoryPage\"; // Asigură-te că numele este corect, înainte era IstoricTranzactii\nimport Profile from \"./Profile\";\nimport LoginForm from \"./LoginForm\"; // Asigură-te că numele este corect, înainte era Login\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [user, setUser] = useState(null);\n\n  // Funcție pentru a prelua datele utilizatorului de la backend\n  // Va fi apelată pentru a actualiza starea 'user' din App.js\n  const fetchAndSetUser = async username => {\n    try {\n      const response = await fetch(`https://localhost:7157/api/Users/user/by-name/${username}`);\n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData);\n        localStorage.setItem('user', JSON.stringify(userData)); // Actualizează și în localStorage\n        return userData;\n      } else {\n        console.error(\"Failed to fetch user profile:\", response.statusText);\n        // Dacă nu se poate prelua profilul, deconectează utilizatorul\n        handleLogout();\n        return null;\n      }\n    } catch (error) {\n      console.error(\"Error fetching user profile:\", error);\n      handleLogout(); // Deconectează la eroare de rețea\n      return null;\n    }\n  };\n\n  // La încărcarea aplicației, verifică dacă există un utilizator logat în localStorage\n  // și încearcă să-i reîncarci datele de la backend\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        if (parsedUser.userName) {\n          fetchAndSetUser(parsedUser.userName); // Reîncarcă user-ul pentru cele mai noi date\n        } else {\n          // Dacă obiectul din localStorage e corupt (fără userName), deconectează\n          handleLogout();\n        }\n      } catch (e) {\n        console.error(\"Failed to parse user from localStorage\", e);\n        handleLogout(); // Curăță localStorage dacă e corupt\n      }\n    }\n  }, []); // Rulează o singură dată la montare\n\n  const handleLogin = async loginData => {\n    try {\n      const response = await fetch('https://localhost:7157/api/Users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(loginData)\n      });\n      if (response.ok) {\n        const userData = await response.json();\n        // După login, preia și setează datele complete ale utilizatorului\n        await fetchAndSetUser(userData.userName);\n      } else {\n        const errorData = await response.json();\n        alert(errorData.message);\n      }\n    } catch (error) {\n      console.error('Eroare la login:', error);\n      alert('A apărut o eroare la conectare. Te rugăm să încerci din nou.');\n    }\n  };\n  const handleLogout = () => {\n    setUser(null);\n    localStorage.removeItem('user'); // Șterge user-ul din localStorage\n  };\n\n  // Această funcție va fi pasată către Profile.js și apelată după o actualizare reușită\n  const handleUserUpdate = async () => {\n    if (user !== null && user !== void 0 && user.userName) {\n      // Reîncarcă user-ul curent de la backend\n      await fetchAndSetUser(user.userName);\n      // După actualizare, poți alege să navighezi înapoi la dashboard\n      // navigate('/'); // Decomment if you want to automatically navigate back\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        element: user ? /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 20\n        }, this) : /*#__PURE__*/_jsxDEV(LoginForm, {\n          onLogin: handleLogin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: user ? /*#__PURE__*/_jsxDEV(Dashboard, {\n          user: user,\n          onLogout: handleLogout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/istoric-tranzactii\",\n        element: user ? /*#__PURE__*/_jsxDEV(TransactionHistoryPage, {\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/profile\",\n        element: user ?\n        /*#__PURE__*/\n        // Pasăm user-ul curent și funcția de actualizare către Profile\n        _jsxDEV(Profile, {\n          user: user,\n          onUserUpdate: handleUserUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        element: /*#__PURE__*/_jsxDEV(Navigate, {\n          to: user ? \"/\" : \"/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","Navigate","Dashboard","TransactionHistoryPage","Profile","LoginForm","jsxDEV","_jsxDEV","App","_s","user","setUser","fetchAndSetUser","username","response","fetch","ok","userData","json","localStorage","setItem","JSON","stringify","console","error","statusText","handleLogout","storedUser","getItem","parsedUser","parse","userName","e","handleLogin","loginData","method","headers","body","errorData","alert","message","removeItem","handleUserUpdate","children","path","element","to","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","onLogout","onUserUpdate","_c","$RefreshReg$"],"sources":["D:/II/Proiect/proiect repository2/TrustPay_Project/TrustPay_corect/TrustPay-front_end/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Routes,\r\n  Route,\r\n  Navigate,\r\n} from \"react-router-dom\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport TransactionHistoryPage from \"./TransactionHistoryPage\"; // Asigură-te că numele este corect, înainte era IstoricTranzactii\r\nimport Profile from \"./Profile\";\r\nimport LoginForm from \"./LoginForm\"; // Asigură-te că numele este corect, înainte era Login\r\n\r\nfunction App() {\r\n  const [user, setUser] = useState(null);\r\n\r\n  // Funcție pentru a prelua datele utilizatorului de la backend\r\n  // Va fi apelată pentru a actualiza starea 'user' din App.js\r\n  const fetchAndSetUser = async (username) => {\r\n    try {\r\n      const response = await fetch(`https://localhost:7157/api/Users/user/by-name/${username}`);\r\n      if (response.ok) {\r\n        const userData = await response.json();\r\n        setUser(userData);\r\n        localStorage.setItem('user', JSON.stringify(userData)); // Actualizează și în localStorage\r\n        return userData;\r\n      } else {\r\n        console.error(\"Failed to fetch user profile:\", response.statusText);\r\n        // Dacă nu se poate prelua profilul, deconectează utilizatorul\r\n        handleLogout();\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching user profile:\", error);\r\n      handleLogout(); // Deconectează la eroare de rețea\r\n      return null;\r\n    }\r\n  };\r\n\r\n\r\n  // La încărcarea aplicației, verifică dacă există un utilizator logat în localStorage\r\n  // și încearcă să-i reîncarci datele de la backend\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      try {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        if (parsedUser.userName) {\r\n          fetchAndSetUser(parsedUser.userName); // Reîncarcă user-ul pentru cele mai noi date\r\n        } else {\r\n          // Dacă obiectul din localStorage e corupt (fără userName), deconectează\r\n          handleLogout();\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Failed to parse user from localStorage\", e);\r\n        handleLogout(); // Curăță localStorage dacă e corupt\r\n      }\r\n    }\r\n  }, []); // Rulează o singură dată la montare\r\n\r\n  const handleLogin = async (loginData) => {\r\n    try {\r\n      const response = await fetch('https://localhost:7157/api/Users/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(loginData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const userData = await response.json();\r\n        // După login, preia și setează datele complete ale utilizatorului\r\n        await fetchAndSetUser(userData.userName);\r\n      } else {\r\n        const errorData = await response.json();\r\n        alert(errorData.message);\r\n      }\r\n    } catch (error) {\r\n      console.error('Eroare la login:', error);\r\n      alert('A apărut o eroare la conectare. Te rugăm să încerci din nou.');\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('user'); // Șterge user-ul din localStorage\r\n  };\r\n\r\n  // Această funcție va fi pasată către Profile.js și apelată după o actualizare reușită\r\n  const handleUserUpdate = async () => {\r\n    if (user?.userName) {\r\n      // Reîncarcă user-ul curent de la backend\r\n      await fetchAndSetUser(user.userName);\r\n      // După actualizare, poți alege să navighezi înapoi la dashboard\r\n      // navigate('/'); // Decomment if you want to automatically navigate back\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route\r\n          path=\"/login\"\r\n          element={\r\n            user ? <Navigate to=\"/\" /> : <LoginForm onLogin={handleLogin} />\r\n          }\r\n        />\r\n        <Route\r\n          path=\"/\"\r\n          element={\r\n            user ? (\r\n              <Dashboard user={user} onLogout={handleLogout} />\r\n            ) : (\r\n              <Navigate to=\"/login\" />\r\n            )\r\n          }\r\n        />\r\n        <Route\r\n          path=\"/istoric-tranzactii\"\r\n          element={\r\n            user ? (\r\n              <TransactionHistoryPage user={user} />\r\n            ) : (\r\n              <Navigate to=\"/login\" />\r\n            )\r\n          }\r\n        />\r\n        <Route\r\n          path=\"/profile\"\r\n          element={\r\n            user ? (\r\n              // Pasăm user-ul curent și funcția de actualizare către Profile\r\n              <Profile user={user} onUserUpdate={handleUserUpdate} />\r\n            ) : (\r\n              <Navigate to=\"/login\" />\r\n            )\r\n          }\r\n        />\r\n        <Route path=\"*\" element={<Navigate to={user ? \"/\" : \"/login\"} />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}